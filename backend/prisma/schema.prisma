// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String   // Hashed password
  firstName     String?
  lastName      String?
  dateOfBirth   DateTime?
  gender        String?
  profileImage  String?
  bio           String?
  preferences   String?  // JSON string for SQLite
  isPremium     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  profiles      Profile[]
  dates         Date[]
  evaluations   DateEvaluation[]
  tags          Tag[]
  insights      Insight[]
  notifications Notification[]

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  name        String
  age         Int?
  photos      String?  // JSON string for SQLite
  bio         String?
  interests   String?  // JSON string for SQLite
  location    String?
  datingApp   String?  // "tinder", "bumble", "hinge", etc.
  externalId  String?  // ID from the dating app
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dates       Date[]

  @@map("profiles")
}

model Date {
  id          String   @id @default(cuid())
  userId      String
  profileId   String?
  dateNumber  Int      // 1st date, 2nd date, etc.
  location    String?
  activity    String?
  duration    Int?     // in minutes
  date        DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile     Profile? @relation(fields: [profileId], references: [id])
  evaluation  DateEvaluation?

  @@map("dates")
}

model DateEvaluation {
  id                String   @id @default(cuid())
  dateId            String   @unique
  userId            String
  
  // Core Debrief Fields
  vibeCheck         String?  // "amazing", "meh", "never again"
  chemistryRating   Int?     // 1-10
  attractionRating  Int?     // 1-10
  
  // Green and Red Flags
  greenFlags        String?  // JSON string for SQLite
  redFlags          String?  // JSON string for SQLite
  
  // Emotional & Behavioral Fields
  emotionalImpact   String?  // "energized", "drained", "comfortable", "anxious"
  conversationQuality String? // "flowing", "awkward pauses", "deep", "surface-level"
  effortLevel       String?  // "planned", "thoughtful", "casual", "lazy"
  bodyLanguage      String?  // "open", "flirty", "distant"
  
  // Image Analysis
  profileImage      String?  // URL to uploaded image
  imageAnalysis     String?  // JSON string for SQLite - AI analysis results
  consistencyCheck  String?  // "same vibe", "better", "worse"
  
  // Power Dynamics
  powerDynamics     String?  // "pursued", "equal", "chasing"
  
  // Social Evaluation
  wouldIntroduceToFriends String? // "yes", "not yet", "no"
  
  // Creative Fields
  remindedOf        String?  // "friend", "ex", "celebrity"
  songMovieFit      String?  // Song/movie that would fit the date
  emojiSummary      String?  // Emoji that sums up the night
  
  // Custom Tags
  customTags        String?  // JSON string for SQLite
  
  // AI Analysis
  aiInsights        String?  // JSON string for SQLite
  compatibilityScore Float?  // 0-100
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  date              Date     @relation(fields: [dateId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags              Tag[]

  @@map("date_evaluations")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?  // "emotional_intelligence", "custom", etc.
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  evaluations DateEvaluation[]

  @@map("tags")
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "pattern", "advice", "trend"
  title       String
  content     String
  data        String?  // JSON string for SQLite
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("insights")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "reminder", "insight", "system"
  title       String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model DatingAppIntegration {
  id          String   @id @default(cuid())
  userId      String
  appName     String   // "tinder", "bumble", "hinge"
  accessToken String?
  refreshToken String?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, appName])
  @@map("dating_app_integrations")
} 