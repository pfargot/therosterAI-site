
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Date
 * 
 */
export type Date = $Result.DefaultSelection<Prisma.$DatePayload>
/**
 * Model DateEvaluation
 * 
 */
export type DateEvaluation = $Result.DefaultSelection<Prisma.$DateEvaluationPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model Insight
 * 
 */
export type Insight = $Result.DefaultSelection<Prisma.$InsightPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model DatingAppIntegration
 * 
 */
export type DatingAppIntegration = $Result.DefaultSelection<Prisma.$DatingAppIntegrationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;

  /**
   * `prisma.date`: Exposes CRUD operations for the **Date** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dates
    * const dates = await prisma.date.findMany()
    * ```
    */
  get date(): Prisma.DateDelegate<ExtArgs>;

  /**
   * `prisma.dateEvaluation`: Exposes CRUD operations for the **DateEvaluation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DateEvaluations
    * const dateEvaluations = await prisma.dateEvaluation.findMany()
    * ```
    */
  get dateEvaluation(): Prisma.DateEvaluationDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.insight`: Exposes CRUD operations for the **Insight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Insights
    * const insights = await prisma.insight.findMany()
    * ```
    */
  get insight(): Prisma.InsightDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.datingAppIntegration`: Exposes CRUD operations for the **DatingAppIntegration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DatingAppIntegrations
    * const datingAppIntegrations = await prisma.datingAppIntegration.findMany()
    * ```
    */
  get datingAppIntegration(): Prisma.DatingAppIntegrationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Date: 'Date',
    DateEvaluation: 'DateEvaluation',
    Tag: 'Tag',
    Insight: 'Insight',
    Notification: 'Notification',
    DatingAppIntegration: 'DatingAppIntegration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "profile" | "date" | "dateEvaluation" | "tag" | "insight" | "notification" | "datingAppIntegration"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Date: {
        payload: Prisma.$DatePayload<ExtArgs>
        fields: Prisma.DateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          findFirst: {
            args: Prisma.DateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          findMany: {
            args: Prisma.DateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>[]
          }
          create: {
            args: Prisma.DateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          createMany: {
            args: Prisma.DateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>[]
          }
          delete: {
            args: Prisma.DateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          update: {
            args: Prisma.DateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          deleteMany: {
            args: Prisma.DateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatePayload>
          }
          aggregate: {
            args: Prisma.DateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDate>
          }
          groupBy: {
            args: Prisma.DateGroupByArgs<ExtArgs>
            result: $Utils.Optional<DateGroupByOutputType>[]
          }
          count: {
            args: Prisma.DateCountArgs<ExtArgs>
            result: $Utils.Optional<DateCountAggregateOutputType> | number
          }
        }
      }
      DateEvaluation: {
        payload: Prisma.$DateEvaluationPayload<ExtArgs>
        fields: Prisma.DateEvaluationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DateEvaluationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DateEvaluationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          findFirst: {
            args: Prisma.DateEvaluationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DateEvaluationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          findMany: {
            args: Prisma.DateEvaluationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>[]
          }
          create: {
            args: Prisma.DateEvaluationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          createMany: {
            args: Prisma.DateEvaluationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DateEvaluationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>[]
          }
          delete: {
            args: Prisma.DateEvaluationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          update: {
            args: Prisma.DateEvaluationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          deleteMany: {
            args: Prisma.DateEvaluationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DateEvaluationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DateEvaluationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DateEvaluationPayload>
          }
          aggregate: {
            args: Prisma.DateEvaluationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDateEvaluation>
          }
          groupBy: {
            args: Prisma.DateEvaluationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DateEvaluationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DateEvaluationCountArgs<ExtArgs>
            result: $Utils.Optional<DateEvaluationCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      Insight: {
        payload: Prisma.$InsightPayload<ExtArgs>
        fields: Prisma.InsightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findFirst: {
            args: Prisma.InsightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findMany: {
            args: Prisma.InsightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          create: {
            args: Prisma.InsightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          createMany: {
            args: Prisma.InsightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          delete: {
            args: Prisma.InsightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          update: {
            args: Prisma.InsightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          deleteMany: {
            args: Prisma.InsightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InsightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          aggregate: {
            args: Prisma.InsightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsight>
          }
          groupBy: {
            args: Prisma.InsightGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsightGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsightCountArgs<ExtArgs>
            result: $Utils.Optional<InsightCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      DatingAppIntegration: {
        payload: Prisma.$DatingAppIntegrationPayload<ExtArgs>
        fields: Prisma.DatingAppIntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DatingAppIntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DatingAppIntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          findFirst: {
            args: Prisma.DatingAppIntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DatingAppIntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          findMany: {
            args: Prisma.DatingAppIntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>[]
          }
          create: {
            args: Prisma.DatingAppIntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          createMany: {
            args: Prisma.DatingAppIntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DatingAppIntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>[]
          }
          delete: {
            args: Prisma.DatingAppIntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          update: {
            args: Prisma.DatingAppIntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          deleteMany: {
            args: Prisma.DatingAppIntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DatingAppIntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DatingAppIntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatingAppIntegrationPayload>
          }
          aggregate: {
            args: Prisma.DatingAppIntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDatingAppIntegration>
          }
          groupBy: {
            args: Prisma.DatingAppIntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<DatingAppIntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.DatingAppIntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<DatingAppIntegrationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    profiles: number
    dates: number
    evaluations: number
    tags: number
    insights: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | UserCountOutputTypeCountProfilesArgs
    dates?: boolean | UserCountOutputTypeCountDatesArgs
    evaluations?: boolean | UserCountOutputTypeCountEvaluationsArgs
    tags?: boolean | UserCountOutputTypeCountTagsArgs
    insights?: boolean | UserCountOutputTypeCountInsightsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEvaluationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateEvaluationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInsightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    dates: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dates?: boolean | ProfileCountOutputTypeCountDatesArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountDatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateWhereInput
  }


  /**
   * Count Type DateEvaluationCountOutputType
   */

  export type DateEvaluationCountOutputType = {
    tags: number
  }

  export type DateEvaluationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | DateEvaluationCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * DateEvaluationCountOutputType without action
   */
  export type DateEvaluationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluationCountOutputType
     */
    select?: DateEvaluationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DateEvaluationCountOutputType without action
   */
  export type DateEvaluationCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    users: number
    evaluations: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | TagCountOutputTypeCountUsersArgs
    evaluations?: boolean | TagCountOutputTypeCountEvaluationsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountEvaluationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateEvaluationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    gender: string | null
    profileImage: string | null
    bio: string | null
    preferences: string | null
    isPremium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    gender: string | null
    profileImage: string | null
    bio: string | null
    preferences: string | null
    isPremium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    firstName: number
    lastName: number
    dateOfBirth: number
    gender: number
    profileImage: number
    bio: number
    preferences: number
    isPremium: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    profileImage?: true
    bio?: true
    preferences?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    profileImage?: true
    bio?: true
    preferences?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    profileImage?: true
    bio?: true
    preferences?: true
    isPremium?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    gender: string | null
    profileImage: string | null
    bio: string | null
    preferences: string | null
    isPremium: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    profileImage?: boolean
    bio?: boolean
    preferences?: boolean
    isPremium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profiles?: boolean | User$profilesArgs<ExtArgs>
    dates?: boolean | User$datesArgs<ExtArgs>
    evaluations?: boolean | User$evaluationsArgs<ExtArgs>
    tags?: boolean | User$tagsArgs<ExtArgs>
    insights?: boolean | User$insightsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    profileImage?: boolean
    bio?: boolean
    preferences?: boolean
    isPremium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    profileImage?: boolean
    bio?: boolean
    preferences?: boolean
    isPremium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | User$profilesArgs<ExtArgs>
    dates?: boolean | User$datesArgs<ExtArgs>
    evaluations?: boolean | User$evaluationsArgs<ExtArgs>
    tags?: boolean | User$tagsArgs<ExtArgs>
    insights?: boolean | User$insightsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
      dates: Prisma.$DatePayload<ExtArgs>[]
      evaluations: Prisma.$DateEvaluationPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
      insights: Prisma.$InsightPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      firstName: string | null
      lastName: string | null
      dateOfBirth: Date | null
      gender: string | null
      profileImage: string | null
      bio: string | null
      preferences: string | null
      isPremium: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends User$profilesArgs<ExtArgs> = {}>(args?: Subset<T, User$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany"> | Null>
    dates<T extends User$datesArgs<ExtArgs> = {}>(args?: Subset<T, User$datesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findMany"> | Null>
    evaluations<T extends User$evaluationsArgs<ExtArgs> = {}>(args?: Subset<T, User$evaluationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends User$tagsArgs<ExtArgs> = {}>(args?: Subset<T, User$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    insights<T extends User$insightsArgs<ExtArgs> = {}>(args?: Subset<T, User$insightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly preferences: FieldRef<"User", 'String'>
    readonly isPremium: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profiles
   */
  export type User$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.dates
   */
  export type User$datesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    where?: DateWhereInput
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    cursor?: DateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DateScalarFieldEnum | DateScalarFieldEnum[]
  }

  /**
   * User.evaluations
   */
  export type User$evaluationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    where?: DateEvaluationWhereInput
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    cursor?: DateEvaluationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DateEvaluationScalarFieldEnum | DateEvaluationScalarFieldEnum[]
  }

  /**
   * User.tags
   */
  export type User$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * User.insights
   */
  export type User$insightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    cursor?: InsightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    age: number | null
  }

  export type ProfileSumAggregateOutputType = {
    age: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    age: number | null
    photos: string | null
    bio: string | null
    interests: string | null
    location: string | null
    datingApp: string | null
    externalId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    age: number | null
    photos: string | null
    bio: string | null
    interests: string | null
    location: string | null
    datingApp: string | null
    externalId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    age: number
    photos: number
    bio: number
    interests: number
    location: number
    datingApp: number
    externalId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    age?: true
  }

  export type ProfileSumAggregateInputType = {
    age?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    age?: true
    photos?: true
    bio?: true
    interests?: true
    location?: true
    datingApp?: true
    externalId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    age?: true
    photos?: true
    bio?: true
    interests?: true
    location?: true
    datingApp?: true
    externalId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    age?: true
    photos?: true
    bio?: true
    interests?: true
    location?: true
    datingApp?: true
    externalId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    userId: string
    name: string
    age: number | null
    photos: string | null
    bio: string | null
    interests: string | null
    location: string | null
    datingApp: string | null
    externalId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    age?: boolean
    photos?: boolean
    bio?: boolean
    interests?: boolean
    location?: boolean
    datingApp?: boolean
    externalId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    dates?: boolean | Profile$datesArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    age?: boolean
    photos?: boolean
    bio?: boolean
    interests?: boolean
    location?: boolean
    datingApp?: boolean
    externalId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    age?: boolean
    photos?: boolean
    bio?: boolean
    interests?: boolean
    location?: boolean
    datingApp?: boolean
    externalId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    dates?: boolean | Profile$datesArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      dates: Prisma.$DatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      age: number | null
      photos: string | null
      bio: string | null
      interests: string | null
      location: string | null
      datingApp: string | null
      externalId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    dates<T extends Profile$datesArgs<ExtArgs> = {}>(args?: Subset<T, Profile$datesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly age: FieldRef<"Profile", 'Int'>
    readonly photos: FieldRef<"Profile", 'String'>
    readonly bio: FieldRef<"Profile", 'String'>
    readonly interests: FieldRef<"Profile", 'String'>
    readonly location: FieldRef<"Profile", 'String'>
    readonly datingApp: FieldRef<"Profile", 'String'>
    readonly externalId: FieldRef<"Profile", 'String'>
    readonly isActive: FieldRef<"Profile", 'Boolean'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile.dates
   */
  export type Profile$datesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    where?: DateWhereInput
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    cursor?: DateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DateScalarFieldEnum | DateScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Date
   */

  export type AggregateDate = {
    _count: DateCountAggregateOutputType | null
    _avg: DateAvgAggregateOutputType | null
    _sum: DateSumAggregateOutputType | null
    _min: DateMinAggregateOutputType | null
    _max: DateMaxAggregateOutputType | null
  }

  export type DateAvgAggregateOutputType = {
    dateNumber: number | null
    duration: number | null
  }

  export type DateSumAggregateOutputType = {
    dateNumber: number | null
    duration: number | null
  }

  export type DateMinAggregateOutputType = {
    id: string | null
    userId: string | null
    profileId: string | null
    dateNumber: number | null
    location: string | null
    activity: string | null
    duration: number | null
    date: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DateMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    profileId: string | null
    dateNumber: number | null
    location: string | null
    activity: string | null
    duration: number | null
    date: Date | null
    isCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DateCountAggregateOutputType = {
    id: number
    userId: number
    profileId: number
    dateNumber: number
    location: number
    activity: number
    duration: number
    date: number
    isCompleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DateAvgAggregateInputType = {
    dateNumber?: true
    duration?: true
  }

  export type DateSumAggregateInputType = {
    dateNumber?: true
    duration?: true
  }

  export type DateMinAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    dateNumber?: true
    location?: true
    activity?: true
    duration?: true
    date?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DateMaxAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    dateNumber?: true
    location?: true
    activity?: true
    duration?: true
    date?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DateCountAggregateInputType = {
    id?: true
    userId?: true
    profileId?: true
    dateNumber?: true
    location?: true
    activity?: true
    duration?: true
    date?: true
    isCompleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Date to aggregate.
     */
    where?: DateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dates to fetch.
     */
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dates
    **/
    _count?: true | DateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DateMaxAggregateInputType
  }

  export type GetDateAggregateType<T extends DateAggregateArgs> = {
        [P in keyof T & keyof AggregateDate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDate[P]>
      : GetScalarType<T[P], AggregateDate[P]>
  }




  export type DateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateWhereInput
    orderBy?: DateOrderByWithAggregationInput | DateOrderByWithAggregationInput[]
    by: DateScalarFieldEnum[] | DateScalarFieldEnum
    having?: DateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DateCountAggregateInputType | true
    _avg?: DateAvgAggregateInputType
    _sum?: DateSumAggregateInputType
    _min?: DateMinAggregateInputType
    _max?: DateMaxAggregateInputType
  }

  export type DateGroupByOutputType = {
    id: string
    userId: string
    profileId: string | null
    dateNumber: number
    location: string | null
    activity: string | null
    duration: number | null
    date: Date
    isCompleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: DateCountAggregateOutputType | null
    _avg: DateAvgAggregateOutputType | null
    _sum: DateSumAggregateOutputType | null
    _min: DateMinAggregateOutputType | null
    _max: DateMaxAggregateOutputType | null
  }

  type GetDateGroupByPayload<T extends DateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DateGroupByOutputType[P]>
            : GetScalarType<T[P], DateGroupByOutputType[P]>
        }
      >
    >


  export type DateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    dateNumber?: boolean
    location?: boolean
    activity?: boolean
    duration?: boolean
    date?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | Date$profileArgs<ExtArgs>
    evaluation?: boolean | Date$evaluationArgs<ExtArgs>
  }, ExtArgs["result"]["date"]>

  export type DateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    profileId?: boolean
    dateNumber?: boolean
    location?: boolean
    activity?: boolean
    duration?: boolean
    date?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | Date$profileArgs<ExtArgs>
  }, ExtArgs["result"]["date"]>

  export type DateSelectScalar = {
    id?: boolean
    userId?: boolean
    profileId?: boolean
    dateNumber?: boolean
    location?: boolean
    activity?: boolean
    duration?: boolean
    date?: boolean
    isCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | Date$profileArgs<ExtArgs>
    evaluation?: boolean | Date$evaluationArgs<ExtArgs>
  }
  export type DateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | Date$profileArgs<ExtArgs>
  }

  export type $DatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Date"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      evaluation: Prisma.$DateEvaluationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      profileId: string | null
      dateNumber: number
      location: string | null
      activity: string | null
      duration: number | null
      date: Date
      isCompleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["date"]>
    composites: {}
  }

  type DateGetPayload<S extends boolean | null | undefined | DateDefaultArgs> = $Result.GetResult<Prisma.$DatePayload, S>

  type DateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DateCountAggregateInputType | true
    }

  export interface DateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Date'], meta: { name: 'Date' } }
    /**
     * Find zero or one Date that matches the filter.
     * @param {DateFindUniqueArgs} args - Arguments to find a Date
     * @example
     * // Get one Date
     * const date = await prisma.date.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DateFindUniqueArgs>(args: SelectSubset<T, DateFindUniqueArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Date that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DateFindUniqueOrThrowArgs} args - Arguments to find a Date
     * @example
     * // Get one Date
     * const date = await prisma.date.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DateFindUniqueOrThrowArgs>(args: SelectSubset<T, DateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Date that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateFindFirstArgs} args - Arguments to find a Date
     * @example
     * // Get one Date
     * const date = await prisma.date.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DateFindFirstArgs>(args?: SelectSubset<T, DateFindFirstArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Date that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateFindFirstOrThrowArgs} args - Arguments to find a Date
     * @example
     * // Get one Date
     * const date = await prisma.date.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DateFindFirstOrThrowArgs>(args?: SelectSubset<T, DateFindFirstOrThrowArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dates
     * const dates = await prisma.date.findMany()
     * 
     * // Get first 10 Dates
     * const dates = await prisma.date.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dateWithIdOnly = await prisma.date.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DateFindManyArgs>(args?: SelectSubset<T, DateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Date.
     * @param {DateCreateArgs} args - Arguments to create a Date.
     * @example
     * // Create one Date
     * const Date = await prisma.date.create({
     *   data: {
     *     // ... data to create a Date
     *   }
     * })
     * 
     */
    create<T extends DateCreateArgs>(args: SelectSubset<T, DateCreateArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dates.
     * @param {DateCreateManyArgs} args - Arguments to create many Dates.
     * @example
     * // Create many Dates
     * const date = await prisma.date.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DateCreateManyArgs>(args?: SelectSubset<T, DateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dates and returns the data saved in the database.
     * @param {DateCreateManyAndReturnArgs} args - Arguments to create many Dates.
     * @example
     * // Create many Dates
     * const date = await prisma.date.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dates and only return the `id`
     * const dateWithIdOnly = await prisma.date.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DateCreateManyAndReturnArgs>(args?: SelectSubset<T, DateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Date.
     * @param {DateDeleteArgs} args - Arguments to delete one Date.
     * @example
     * // Delete one Date
     * const Date = await prisma.date.delete({
     *   where: {
     *     // ... filter to delete one Date
     *   }
     * })
     * 
     */
    delete<T extends DateDeleteArgs>(args: SelectSubset<T, DateDeleteArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Date.
     * @param {DateUpdateArgs} args - Arguments to update one Date.
     * @example
     * // Update one Date
     * const date = await prisma.date.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DateUpdateArgs>(args: SelectSubset<T, DateUpdateArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dates.
     * @param {DateDeleteManyArgs} args - Arguments to filter Dates to delete.
     * @example
     * // Delete a few Dates
     * const { count } = await prisma.date.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DateDeleteManyArgs>(args?: SelectSubset<T, DateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dates
     * const date = await prisma.date.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DateUpdateManyArgs>(args: SelectSubset<T, DateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Date.
     * @param {DateUpsertArgs} args - Arguments to update or create a Date.
     * @example
     * // Update or create a Date
     * const date = await prisma.date.upsert({
     *   create: {
     *     // ... data to create a Date
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Date we want to update
     *   }
     * })
     */
    upsert<T extends DateUpsertArgs>(args: SelectSubset<T, DateUpsertArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Dates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateCountArgs} args - Arguments to filter Dates to count.
     * @example
     * // Count the number of Dates
     * const count = await prisma.date.count({
     *   where: {
     *     // ... the filter for the Dates we want to count
     *   }
     * })
    **/
    count<T extends DateCountArgs>(
      args?: Subset<T, DateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Date.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DateAggregateArgs>(args: Subset<T, DateAggregateArgs>): Prisma.PrismaPromise<GetDateAggregateType<T>>

    /**
     * Group by Date.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DateGroupByArgs['orderBy'] }
        : { orderBy?: DateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Date model
   */
  readonly fields: DateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Date.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    profile<T extends Date$profileArgs<ExtArgs> = {}>(args?: Subset<T, Date$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    evaluation<T extends Date$evaluationArgs<ExtArgs> = {}>(args?: Subset<T, Date$evaluationArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Date model
   */ 
  interface DateFieldRefs {
    readonly id: FieldRef<"Date", 'String'>
    readonly userId: FieldRef<"Date", 'String'>
    readonly profileId: FieldRef<"Date", 'String'>
    readonly dateNumber: FieldRef<"Date", 'Int'>
    readonly location: FieldRef<"Date", 'String'>
    readonly activity: FieldRef<"Date", 'String'>
    readonly duration: FieldRef<"Date", 'Int'>
    readonly date: FieldRef<"Date", 'DateTime'>
    readonly isCompleted: FieldRef<"Date", 'Boolean'>
    readonly createdAt: FieldRef<"Date", 'DateTime'>
    readonly updatedAt: FieldRef<"Date", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Date findUnique
   */
  export type DateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter, which Date to fetch.
     */
    where: DateWhereUniqueInput
  }

  /**
   * Date findUniqueOrThrow
   */
  export type DateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter, which Date to fetch.
     */
    where: DateWhereUniqueInput
  }

  /**
   * Date findFirst
   */
  export type DateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter, which Date to fetch.
     */
    where?: DateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dates to fetch.
     */
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dates.
     */
    cursor?: DateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dates.
     */
    distinct?: DateScalarFieldEnum | DateScalarFieldEnum[]
  }

  /**
   * Date findFirstOrThrow
   */
  export type DateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter, which Date to fetch.
     */
    where?: DateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dates to fetch.
     */
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dates.
     */
    cursor?: DateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dates.
     */
    distinct?: DateScalarFieldEnum | DateScalarFieldEnum[]
  }

  /**
   * Date findMany
   */
  export type DateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter, which Dates to fetch.
     */
    where?: DateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dates to fetch.
     */
    orderBy?: DateOrderByWithRelationInput | DateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dates.
     */
    cursor?: DateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dates.
     */
    skip?: number
    distinct?: DateScalarFieldEnum | DateScalarFieldEnum[]
  }

  /**
   * Date create
   */
  export type DateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * The data needed to create a Date.
     */
    data: XOR<DateCreateInput, DateUncheckedCreateInput>
  }

  /**
   * Date createMany
   */
  export type DateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dates.
     */
    data: DateCreateManyInput | DateCreateManyInput[]
  }

  /**
   * Date createManyAndReturn
   */
  export type DateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Dates.
     */
    data: DateCreateManyInput | DateCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Date update
   */
  export type DateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * The data needed to update a Date.
     */
    data: XOR<DateUpdateInput, DateUncheckedUpdateInput>
    /**
     * Choose, which Date to update.
     */
    where: DateWhereUniqueInput
  }

  /**
   * Date updateMany
   */
  export type DateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dates.
     */
    data: XOR<DateUpdateManyMutationInput, DateUncheckedUpdateManyInput>
    /**
     * Filter which Dates to update
     */
    where?: DateWhereInput
  }

  /**
   * Date upsert
   */
  export type DateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * The filter to search for the Date to update in case it exists.
     */
    where: DateWhereUniqueInput
    /**
     * In case the Date found by the `where` argument doesn't exist, create a new Date with this data.
     */
    create: XOR<DateCreateInput, DateUncheckedCreateInput>
    /**
     * In case the Date was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DateUpdateInput, DateUncheckedUpdateInput>
  }

  /**
   * Date delete
   */
  export type DateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
    /**
     * Filter which Date to delete.
     */
    where: DateWhereUniqueInput
  }

  /**
   * Date deleteMany
   */
  export type DateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dates to delete
     */
    where?: DateWhereInput
  }

  /**
   * Date.profile
   */
  export type Date$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * Date.evaluation
   */
  export type Date$evaluationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    where?: DateEvaluationWhereInput
  }

  /**
   * Date without action
   */
  export type DateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Date
     */
    select?: DateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateInclude<ExtArgs> | null
  }


  /**
   * Model DateEvaluation
   */

  export type AggregateDateEvaluation = {
    _count: DateEvaluationCountAggregateOutputType | null
    _avg: DateEvaluationAvgAggregateOutputType | null
    _sum: DateEvaluationSumAggregateOutputType | null
    _min: DateEvaluationMinAggregateOutputType | null
    _max: DateEvaluationMaxAggregateOutputType | null
  }

  export type DateEvaluationAvgAggregateOutputType = {
    chemistryRating: number | null
    attractionRating: number | null
    compatibilityScore: number | null
  }

  export type DateEvaluationSumAggregateOutputType = {
    chemistryRating: number | null
    attractionRating: number | null
    compatibilityScore: number | null
  }

  export type DateEvaluationMinAggregateOutputType = {
    id: string | null
    dateId: string | null
    userId: string | null
    vibeCheck: string | null
    chemistryRating: number | null
    attractionRating: number | null
    greenFlags: string | null
    redFlags: string | null
    emotionalImpact: string | null
    conversationQuality: string | null
    effortLevel: string | null
    bodyLanguage: string | null
    profileImage: string | null
    imageAnalysis: string | null
    consistencyCheck: string | null
    powerDynamics: string | null
    wouldIntroduceToFriends: string | null
    remindedOf: string | null
    songMovieFit: string | null
    emojiSummary: string | null
    customTags: string | null
    aiInsights: string | null
    compatibilityScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DateEvaluationMaxAggregateOutputType = {
    id: string | null
    dateId: string | null
    userId: string | null
    vibeCheck: string | null
    chemistryRating: number | null
    attractionRating: number | null
    greenFlags: string | null
    redFlags: string | null
    emotionalImpact: string | null
    conversationQuality: string | null
    effortLevel: string | null
    bodyLanguage: string | null
    profileImage: string | null
    imageAnalysis: string | null
    consistencyCheck: string | null
    powerDynamics: string | null
    wouldIntroduceToFriends: string | null
    remindedOf: string | null
    songMovieFit: string | null
    emojiSummary: string | null
    customTags: string | null
    aiInsights: string | null
    compatibilityScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DateEvaluationCountAggregateOutputType = {
    id: number
    dateId: number
    userId: number
    vibeCheck: number
    chemistryRating: number
    attractionRating: number
    greenFlags: number
    redFlags: number
    emotionalImpact: number
    conversationQuality: number
    effortLevel: number
    bodyLanguage: number
    profileImage: number
    imageAnalysis: number
    consistencyCheck: number
    powerDynamics: number
    wouldIntroduceToFriends: number
    remindedOf: number
    songMovieFit: number
    emojiSummary: number
    customTags: number
    aiInsights: number
    compatibilityScore: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DateEvaluationAvgAggregateInputType = {
    chemistryRating?: true
    attractionRating?: true
    compatibilityScore?: true
  }

  export type DateEvaluationSumAggregateInputType = {
    chemistryRating?: true
    attractionRating?: true
    compatibilityScore?: true
  }

  export type DateEvaluationMinAggregateInputType = {
    id?: true
    dateId?: true
    userId?: true
    vibeCheck?: true
    chemistryRating?: true
    attractionRating?: true
    greenFlags?: true
    redFlags?: true
    emotionalImpact?: true
    conversationQuality?: true
    effortLevel?: true
    bodyLanguage?: true
    profileImage?: true
    imageAnalysis?: true
    consistencyCheck?: true
    powerDynamics?: true
    wouldIntroduceToFriends?: true
    remindedOf?: true
    songMovieFit?: true
    emojiSummary?: true
    customTags?: true
    aiInsights?: true
    compatibilityScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DateEvaluationMaxAggregateInputType = {
    id?: true
    dateId?: true
    userId?: true
    vibeCheck?: true
    chemistryRating?: true
    attractionRating?: true
    greenFlags?: true
    redFlags?: true
    emotionalImpact?: true
    conversationQuality?: true
    effortLevel?: true
    bodyLanguage?: true
    profileImage?: true
    imageAnalysis?: true
    consistencyCheck?: true
    powerDynamics?: true
    wouldIntroduceToFriends?: true
    remindedOf?: true
    songMovieFit?: true
    emojiSummary?: true
    customTags?: true
    aiInsights?: true
    compatibilityScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DateEvaluationCountAggregateInputType = {
    id?: true
    dateId?: true
    userId?: true
    vibeCheck?: true
    chemistryRating?: true
    attractionRating?: true
    greenFlags?: true
    redFlags?: true
    emotionalImpact?: true
    conversationQuality?: true
    effortLevel?: true
    bodyLanguage?: true
    profileImage?: true
    imageAnalysis?: true
    consistencyCheck?: true
    powerDynamics?: true
    wouldIntroduceToFriends?: true
    remindedOf?: true
    songMovieFit?: true
    emojiSummary?: true
    customTags?: true
    aiInsights?: true
    compatibilityScore?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DateEvaluationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DateEvaluation to aggregate.
     */
    where?: DateEvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DateEvaluations to fetch.
     */
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DateEvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DateEvaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DateEvaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DateEvaluations
    **/
    _count?: true | DateEvaluationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DateEvaluationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DateEvaluationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DateEvaluationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DateEvaluationMaxAggregateInputType
  }

  export type GetDateEvaluationAggregateType<T extends DateEvaluationAggregateArgs> = {
        [P in keyof T & keyof AggregateDateEvaluation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDateEvaluation[P]>
      : GetScalarType<T[P], AggregateDateEvaluation[P]>
  }




  export type DateEvaluationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DateEvaluationWhereInput
    orderBy?: DateEvaluationOrderByWithAggregationInput | DateEvaluationOrderByWithAggregationInput[]
    by: DateEvaluationScalarFieldEnum[] | DateEvaluationScalarFieldEnum
    having?: DateEvaluationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DateEvaluationCountAggregateInputType | true
    _avg?: DateEvaluationAvgAggregateInputType
    _sum?: DateEvaluationSumAggregateInputType
    _min?: DateEvaluationMinAggregateInputType
    _max?: DateEvaluationMaxAggregateInputType
  }

  export type DateEvaluationGroupByOutputType = {
    id: string
    dateId: string
    userId: string
    vibeCheck: string | null
    chemistryRating: number | null
    attractionRating: number | null
    greenFlags: string | null
    redFlags: string | null
    emotionalImpact: string | null
    conversationQuality: string | null
    effortLevel: string | null
    bodyLanguage: string | null
    profileImage: string | null
    imageAnalysis: string | null
    consistencyCheck: string | null
    powerDynamics: string | null
    wouldIntroduceToFriends: string | null
    remindedOf: string | null
    songMovieFit: string | null
    emojiSummary: string | null
    customTags: string | null
    aiInsights: string | null
    compatibilityScore: number | null
    createdAt: Date
    updatedAt: Date
    _count: DateEvaluationCountAggregateOutputType | null
    _avg: DateEvaluationAvgAggregateOutputType | null
    _sum: DateEvaluationSumAggregateOutputType | null
    _min: DateEvaluationMinAggregateOutputType | null
    _max: DateEvaluationMaxAggregateOutputType | null
  }

  type GetDateEvaluationGroupByPayload<T extends DateEvaluationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DateEvaluationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DateEvaluationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DateEvaluationGroupByOutputType[P]>
            : GetScalarType<T[P], DateEvaluationGroupByOutputType[P]>
        }
      >
    >


  export type DateEvaluationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateId?: boolean
    userId?: boolean
    vibeCheck?: boolean
    chemistryRating?: boolean
    attractionRating?: boolean
    greenFlags?: boolean
    redFlags?: boolean
    emotionalImpact?: boolean
    conversationQuality?: boolean
    effortLevel?: boolean
    bodyLanguage?: boolean
    profileImage?: boolean
    imageAnalysis?: boolean
    consistencyCheck?: boolean
    powerDynamics?: boolean
    wouldIntroduceToFriends?: boolean
    remindedOf?: boolean
    songMovieFit?: boolean
    emojiSummary?: boolean
    customTags?: boolean
    aiInsights?: boolean
    compatibilityScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean | DateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | DateEvaluation$tagsArgs<ExtArgs>
    _count?: boolean | DateEvaluationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dateEvaluation"]>

  export type DateEvaluationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dateId?: boolean
    userId?: boolean
    vibeCheck?: boolean
    chemistryRating?: boolean
    attractionRating?: boolean
    greenFlags?: boolean
    redFlags?: boolean
    emotionalImpact?: boolean
    conversationQuality?: boolean
    effortLevel?: boolean
    bodyLanguage?: boolean
    profileImage?: boolean
    imageAnalysis?: boolean
    consistencyCheck?: boolean
    powerDynamics?: boolean
    wouldIntroduceToFriends?: boolean
    remindedOf?: boolean
    songMovieFit?: boolean
    emojiSummary?: boolean
    customTags?: boolean
    aiInsights?: boolean
    compatibilityScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean | DateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dateEvaluation"]>

  export type DateEvaluationSelectScalar = {
    id?: boolean
    dateId?: boolean
    userId?: boolean
    vibeCheck?: boolean
    chemistryRating?: boolean
    attractionRating?: boolean
    greenFlags?: boolean
    redFlags?: boolean
    emotionalImpact?: boolean
    conversationQuality?: boolean
    effortLevel?: boolean
    bodyLanguage?: boolean
    profileImage?: boolean
    imageAnalysis?: boolean
    consistencyCheck?: boolean
    powerDynamics?: boolean
    wouldIntroduceToFriends?: boolean
    remindedOf?: boolean
    songMovieFit?: boolean
    emojiSummary?: boolean
    customTags?: boolean
    aiInsights?: boolean
    compatibilityScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DateEvaluationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    date?: boolean | DateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    tags?: boolean | DateEvaluation$tagsArgs<ExtArgs>
    _count?: boolean | DateEvaluationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DateEvaluationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    date?: boolean | DateDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DateEvaluationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DateEvaluation"
    objects: {
      date: Prisma.$DatePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dateId: string
      userId: string
      vibeCheck: string | null
      chemistryRating: number | null
      attractionRating: number | null
      greenFlags: string | null
      redFlags: string | null
      emotionalImpact: string | null
      conversationQuality: string | null
      effortLevel: string | null
      bodyLanguage: string | null
      profileImage: string | null
      imageAnalysis: string | null
      consistencyCheck: string | null
      powerDynamics: string | null
      wouldIntroduceToFriends: string | null
      remindedOf: string | null
      songMovieFit: string | null
      emojiSummary: string | null
      customTags: string | null
      aiInsights: string | null
      compatibilityScore: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dateEvaluation"]>
    composites: {}
  }

  type DateEvaluationGetPayload<S extends boolean | null | undefined | DateEvaluationDefaultArgs> = $Result.GetResult<Prisma.$DateEvaluationPayload, S>

  type DateEvaluationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DateEvaluationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DateEvaluationCountAggregateInputType | true
    }

  export interface DateEvaluationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DateEvaluation'], meta: { name: 'DateEvaluation' } }
    /**
     * Find zero or one DateEvaluation that matches the filter.
     * @param {DateEvaluationFindUniqueArgs} args - Arguments to find a DateEvaluation
     * @example
     * // Get one DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DateEvaluationFindUniqueArgs>(args: SelectSubset<T, DateEvaluationFindUniqueArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DateEvaluation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DateEvaluationFindUniqueOrThrowArgs} args - Arguments to find a DateEvaluation
     * @example
     * // Get one DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DateEvaluationFindUniqueOrThrowArgs>(args: SelectSubset<T, DateEvaluationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DateEvaluation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationFindFirstArgs} args - Arguments to find a DateEvaluation
     * @example
     * // Get one DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DateEvaluationFindFirstArgs>(args?: SelectSubset<T, DateEvaluationFindFirstArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DateEvaluation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationFindFirstOrThrowArgs} args - Arguments to find a DateEvaluation
     * @example
     * // Get one DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DateEvaluationFindFirstOrThrowArgs>(args?: SelectSubset<T, DateEvaluationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DateEvaluations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DateEvaluations
     * const dateEvaluations = await prisma.dateEvaluation.findMany()
     * 
     * // Get first 10 DateEvaluations
     * const dateEvaluations = await prisma.dateEvaluation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dateEvaluationWithIdOnly = await prisma.dateEvaluation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DateEvaluationFindManyArgs>(args?: SelectSubset<T, DateEvaluationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DateEvaluation.
     * @param {DateEvaluationCreateArgs} args - Arguments to create a DateEvaluation.
     * @example
     * // Create one DateEvaluation
     * const DateEvaluation = await prisma.dateEvaluation.create({
     *   data: {
     *     // ... data to create a DateEvaluation
     *   }
     * })
     * 
     */
    create<T extends DateEvaluationCreateArgs>(args: SelectSubset<T, DateEvaluationCreateArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DateEvaluations.
     * @param {DateEvaluationCreateManyArgs} args - Arguments to create many DateEvaluations.
     * @example
     * // Create many DateEvaluations
     * const dateEvaluation = await prisma.dateEvaluation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DateEvaluationCreateManyArgs>(args?: SelectSubset<T, DateEvaluationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DateEvaluations and returns the data saved in the database.
     * @param {DateEvaluationCreateManyAndReturnArgs} args - Arguments to create many DateEvaluations.
     * @example
     * // Create many DateEvaluations
     * const dateEvaluation = await prisma.dateEvaluation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DateEvaluations and only return the `id`
     * const dateEvaluationWithIdOnly = await prisma.dateEvaluation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DateEvaluationCreateManyAndReturnArgs>(args?: SelectSubset<T, DateEvaluationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DateEvaluation.
     * @param {DateEvaluationDeleteArgs} args - Arguments to delete one DateEvaluation.
     * @example
     * // Delete one DateEvaluation
     * const DateEvaluation = await prisma.dateEvaluation.delete({
     *   where: {
     *     // ... filter to delete one DateEvaluation
     *   }
     * })
     * 
     */
    delete<T extends DateEvaluationDeleteArgs>(args: SelectSubset<T, DateEvaluationDeleteArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DateEvaluation.
     * @param {DateEvaluationUpdateArgs} args - Arguments to update one DateEvaluation.
     * @example
     * // Update one DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DateEvaluationUpdateArgs>(args: SelectSubset<T, DateEvaluationUpdateArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DateEvaluations.
     * @param {DateEvaluationDeleteManyArgs} args - Arguments to filter DateEvaluations to delete.
     * @example
     * // Delete a few DateEvaluations
     * const { count } = await prisma.dateEvaluation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DateEvaluationDeleteManyArgs>(args?: SelectSubset<T, DateEvaluationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DateEvaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DateEvaluations
     * const dateEvaluation = await prisma.dateEvaluation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DateEvaluationUpdateManyArgs>(args: SelectSubset<T, DateEvaluationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DateEvaluation.
     * @param {DateEvaluationUpsertArgs} args - Arguments to update or create a DateEvaluation.
     * @example
     * // Update or create a DateEvaluation
     * const dateEvaluation = await prisma.dateEvaluation.upsert({
     *   create: {
     *     // ... data to create a DateEvaluation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DateEvaluation we want to update
     *   }
     * })
     */
    upsert<T extends DateEvaluationUpsertArgs>(args: SelectSubset<T, DateEvaluationUpsertArgs<ExtArgs>>): Prisma__DateEvaluationClient<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DateEvaluations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationCountArgs} args - Arguments to filter DateEvaluations to count.
     * @example
     * // Count the number of DateEvaluations
     * const count = await prisma.dateEvaluation.count({
     *   where: {
     *     // ... the filter for the DateEvaluations we want to count
     *   }
     * })
    **/
    count<T extends DateEvaluationCountArgs>(
      args?: Subset<T, DateEvaluationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DateEvaluationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DateEvaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DateEvaluationAggregateArgs>(args: Subset<T, DateEvaluationAggregateArgs>): Prisma.PrismaPromise<GetDateEvaluationAggregateType<T>>

    /**
     * Group by DateEvaluation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DateEvaluationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DateEvaluationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DateEvaluationGroupByArgs['orderBy'] }
        : { orderBy?: DateEvaluationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DateEvaluationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDateEvaluationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DateEvaluation model
   */
  readonly fields: DateEvaluationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DateEvaluation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DateEvaluationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    date<T extends DateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DateDefaultArgs<ExtArgs>>): Prisma__DateClient<$Result.GetResult<Prisma.$DatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tags<T extends DateEvaluation$tagsArgs<ExtArgs> = {}>(args?: Subset<T, DateEvaluation$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DateEvaluation model
   */ 
  interface DateEvaluationFieldRefs {
    readonly id: FieldRef<"DateEvaluation", 'String'>
    readonly dateId: FieldRef<"DateEvaluation", 'String'>
    readonly userId: FieldRef<"DateEvaluation", 'String'>
    readonly vibeCheck: FieldRef<"DateEvaluation", 'String'>
    readonly chemistryRating: FieldRef<"DateEvaluation", 'Int'>
    readonly attractionRating: FieldRef<"DateEvaluation", 'Int'>
    readonly greenFlags: FieldRef<"DateEvaluation", 'String'>
    readonly redFlags: FieldRef<"DateEvaluation", 'String'>
    readonly emotionalImpact: FieldRef<"DateEvaluation", 'String'>
    readonly conversationQuality: FieldRef<"DateEvaluation", 'String'>
    readonly effortLevel: FieldRef<"DateEvaluation", 'String'>
    readonly bodyLanguage: FieldRef<"DateEvaluation", 'String'>
    readonly profileImage: FieldRef<"DateEvaluation", 'String'>
    readonly imageAnalysis: FieldRef<"DateEvaluation", 'String'>
    readonly consistencyCheck: FieldRef<"DateEvaluation", 'String'>
    readonly powerDynamics: FieldRef<"DateEvaluation", 'String'>
    readonly wouldIntroduceToFriends: FieldRef<"DateEvaluation", 'String'>
    readonly remindedOf: FieldRef<"DateEvaluation", 'String'>
    readonly songMovieFit: FieldRef<"DateEvaluation", 'String'>
    readonly emojiSummary: FieldRef<"DateEvaluation", 'String'>
    readonly customTags: FieldRef<"DateEvaluation", 'String'>
    readonly aiInsights: FieldRef<"DateEvaluation", 'String'>
    readonly compatibilityScore: FieldRef<"DateEvaluation", 'Float'>
    readonly createdAt: FieldRef<"DateEvaluation", 'DateTime'>
    readonly updatedAt: FieldRef<"DateEvaluation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DateEvaluation findUnique
   */
  export type DateEvaluationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter, which DateEvaluation to fetch.
     */
    where: DateEvaluationWhereUniqueInput
  }

  /**
   * DateEvaluation findUniqueOrThrow
   */
  export type DateEvaluationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter, which DateEvaluation to fetch.
     */
    where: DateEvaluationWhereUniqueInput
  }

  /**
   * DateEvaluation findFirst
   */
  export type DateEvaluationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter, which DateEvaluation to fetch.
     */
    where?: DateEvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DateEvaluations to fetch.
     */
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DateEvaluations.
     */
    cursor?: DateEvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DateEvaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DateEvaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DateEvaluations.
     */
    distinct?: DateEvaluationScalarFieldEnum | DateEvaluationScalarFieldEnum[]
  }

  /**
   * DateEvaluation findFirstOrThrow
   */
  export type DateEvaluationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter, which DateEvaluation to fetch.
     */
    where?: DateEvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DateEvaluations to fetch.
     */
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DateEvaluations.
     */
    cursor?: DateEvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DateEvaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DateEvaluations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DateEvaluations.
     */
    distinct?: DateEvaluationScalarFieldEnum | DateEvaluationScalarFieldEnum[]
  }

  /**
   * DateEvaluation findMany
   */
  export type DateEvaluationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter, which DateEvaluations to fetch.
     */
    where?: DateEvaluationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DateEvaluations to fetch.
     */
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DateEvaluations.
     */
    cursor?: DateEvaluationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DateEvaluations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DateEvaluations.
     */
    skip?: number
    distinct?: DateEvaluationScalarFieldEnum | DateEvaluationScalarFieldEnum[]
  }

  /**
   * DateEvaluation create
   */
  export type DateEvaluationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * The data needed to create a DateEvaluation.
     */
    data: XOR<DateEvaluationCreateInput, DateEvaluationUncheckedCreateInput>
  }

  /**
   * DateEvaluation createMany
   */
  export type DateEvaluationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DateEvaluations.
     */
    data: DateEvaluationCreateManyInput | DateEvaluationCreateManyInput[]
  }

  /**
   * DateEvaluation createManyAndReturn
   */
  export type DateEvaluationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DateEvaluations.
     */
    data: DateEvaluationCreateManyInput | DateEvaluationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DateEvaluation update
   */
  export type DateEvaluationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * The data needed to update a DateEvaluation.
     */
    data: XOR<DateEvaluationUpdateInput, DateEvaluationUncheckedUpdateInput>
    /**
     * Choose, which DateEvaluation to update.
     */
    where: DateEvaluationWhereUniqueInput
  }

  /**
   * DateEvaluation updateMany
   */
  export type DateEvaluationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DateEvaluations.
     */
    data: XOR<DateEvaluationUpdateManyMutationInput, DateEvaluationUncheckedUpdateManyInput>
    /**
     * Filter which DateEvaluations to update
     */
    where?: DateEvaluationWhereInput
  }

  /**
   * DateEvaluation upsert
   */
  export type DateEvaluationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * The filter to search for the DateEvaluation to update in case it exists.
     */
    where: DateEvaluationWhereUniqueInput
    /**
     * In case the DateEvaluation found by the `where` argument doesn't exist, create a new DateEvaluation with this data.
     */
    create: XOR<DateEvaluationCreateInput, DateEvaluationUncheckedCreateInput>
    /**
     * In case the DateEvaluation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DateEvaluationUpdateInput, DateEvaluationUncheckedUpdateInput>
  }

  /**
   * DateEvaluation delete
   */
  export type DateEvaluationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    /**
     * Filter which DateEvaluation to delete.
     */
    where: DateEvaluationWhereUniqueInput
  }

  /**
   * DateEvaluation deleteMany
   */
  export type DateEvaluationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DateEvaluations to delete
     */
    where?: DateEvaluationWhereInput
  }

  /**
   * DateEvaluation.tags
   */
  export type DateEvaluation$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * DateEvaluation without action
   */
  export type DateEvaluationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    category: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    category: string | null
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Tag$usersArgs<ExtArgs>
    evaluations?: boolean | Tag$evaluationsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Tag$usersArgs<ExtArgs>
    evaluations?: boolean | Tag$evaluationsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      evaluations: Prisma.$DateEvaluationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string | null
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Tag$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tag$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    evaluations<T extends Tag$evaluationsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$evaluationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DateEvaluationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly category: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.users
   */
  export type Tag$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tag.evaluations
   */
  export type Tag$evaluationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DateEvaluation
     */
    select?: DateEvaluationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DateEvaluationInclude<ExtArgs> | null
    where?: DateEvaluationWhereInput
    orderBy?: DateEvaluationOrderByWithRelationInput | DateEvaluationOrderByWithRelationInput[]
    cursor?: DateEvaluationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DateEvaluationScalarFieldEnum | DateEvaluationScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model Insight
   */

  export type AggregateInsight = {
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  export type InsightMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    content: string | null
    data: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type InsightMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    content: string | null
    data: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type InsightCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    content: number
    data: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type InsightMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    isRead?: true
    createdAt?: true
  }

  export type InsightMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    isRead?: true
    createdAt?: true
  }

  export type InsightCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    content?: true
    data?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type InsightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insight to aggregate.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Insights
    **/
    _count?: true | InsightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsightMaxAggregateInputType
  }

  export type GetInsightAggregateType<T extends InsightAggregateArgs> = {
        [P in keyof T & keyof AggregateInsight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsight[P]>
      : GetScalarType<T[P], AggregateInsight[P]>
  }




  export type InsightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithAggregationInput | InsightOrderByWithAggregationInput[]
    by: InsightScalarFieldEnum[] | InsightScalarFieldEnum
    having?: InsightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsightCountAggregateInputType | true
    _min?: InsightMinAggregateInputType
    _max?: InsightMaxAggregateInputType
  }

  export type InsightGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    content: string
    data: string | null
    isRead: boolean
    createdAt: Date
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  type GetInsightGroupByPayload<T extends InsightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsightGroupByOutputType[P]>
            : GetScalarType<T[P], InsightGroupByOutputType[P]>
        }
      >
    >


  export type InsightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    data?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    data?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    data?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type InsightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InsightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InsightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Insight"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      title: string
      content: string
      data: string | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["insight"]>
    composites: {}
  }

  type InsightGetPayload<S extends boolean | null | undefined | InsightDefaultArgs> = $Result.GetResult<Prisma.$InsightPayload, S>

  type InsightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InsightFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InsightCountAggregateInputType | true
    }

  export interface InsightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Insight'], meta: { name: 'Insight' } }
    /**
     * Find zero or one Insight that matches the filter.
     * @param {InsightFindUniqueArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsightFindUniqueArgs>(args: SelectSubset<T, InsightFindUniqueArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Insight that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InsightFindUniqueOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsightFindUniqueOrThrowArgs>(args: SelectSubset<T, InsightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Insight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsightFindFirstArgs>(args?: SelectSubset<T, InsightFindFirstArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Insight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsightFindFirstOrThrowArgs>(args?: SelectSubset<T, InsightFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Insights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Insights
     * const insights = await prisma.insight.findMany()
     * 
     * // Get first 10 Insights
     * const insights = await prisma.insight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insightWithIdOnly = await prisma.insight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsightFindManyArgs>(args?: SelectSubset<T, InsightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Insight.
     * @param {InsightCreateArgs} args - Arguments to create a Insight.
     * @example
     * // Create one Insight
     * const Insight = await prisma.insight.create({
     *   data: {
     *     // ... data to create a Insight
     *   }
     * })
     * 
     */
    create<T extends InsightCreateArgs>(args: SelectSubset<T, InsightCreateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Insights.
     * @param {InsightCreateManyArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsightCreateManyArgs>(args?: SelectSubset<T, InsightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Insights and returns the data saved in the database.
     * @param {InsightCreateManyAndReturnArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Insights and only return the `id`
     * const insightWithIdOnly = await prisma.insight.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsightCreateManyAndReturnArgs>(args?: SelectSubset<T, InsightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Insight.
     * @param {InsightDeleteArgs} args - Arguments to delete one Insight.
     * @example
     * // Delete one Insight
     * const Insight = await prisma.insight.delete({
     *   where: {
     *     // ... filter to delete one Insight
     *   }
     * })
     * 
     */
    delete<T extends InsightDeleteArgs>(args: SelectSubset<T, InsightDeleteArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Insight.
     * @param {InsightUpdateArgs} args - Arguments to update one Insight.
     * @example
     * // Update one Insight
     * const insight = await prisma.insight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsightUpdateArgs>(args: SelectSubset<T, InsightUpdateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Insights.
     * @param {InsightDeleteManyArgs} args - Arguments to filter Insights to delete.
     * @example
     * // Delete a few Insights
     * const { count } = await prisma.insight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsightDeleteManyArgs>(args?: SelectSubset<T, InsightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Insights
     * const insight = await prisma.insight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsightUpdateManyArgs>(args: SelectSubset<T, InsightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Insight.
     * @param {InsightUpsertArgs} args - Arguments to update or create a Insight.
     * @example
     * // Update or create a Insight
     * const insight = await prisma.insight.upsert({
     *   create: {
     *     // ... data to create a Insight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Insight we want to update
     *   }
     * })
     */
    upsert<T extends InsightUpsertArgs>(args: SelectSubset<T, InsightUpsertArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCountArgs} args - Arguments to filter Insights to count.
     * @example
     * // Count the number of Insights
     * const count = await prisma.insight.count({
     *   where: {
     *     // ... the filter for the Insights we want to count
     *   }
     * })
    **/
    count<T extends InsightCountArgs>(
      args?: Subset<T, InsightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsightAggregateArgs>(args: Subset<T, InsightAggregateArgs>): Prisma.PrismaPromise<GetInsightAggregateType<T>>

    /**
     * Group by Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsightGroupByArgs['orderBy'] }
        : { orderBy?: InsightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Insight model
   */
  readonly fields: InsightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Insight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Insight model
   */ 
  interface InsightFieldRefs {
    readonly id: FieldRef<"Insight", 'String'>
    readonly userId: FieldRef<"Insight", 'String'>
    readonly type: FieldRef<"Insight", 'String'>
    readonly title: FieldRef<"Insight", 'String'>
    readonly content: FieldRef<"Insight", 'String'>
    readonly data: FieldRef<"Insight", 'String'>
    readonly isRead: FieldRef<"Insight", 'Boolean'>
    readonly createdAt: FieldRef<"Insight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Insight findUnique
   */
  export type InsightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findUniqueOrThrow
   */
  export type InsightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findFirst
   */
  export type InsightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findFirstOrThrow
   */
  export type InsightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findMany
   */
  export type InsightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insights to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight create
   */
  export type InsightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to create a Insight.
     */
    data: XOR<InsightCreateInput, InsightUncheckedCreateInput>
  }

  /**
   * Insight createMany
   */
  export type InsightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
  }

  /**
   * Insight createManyAndReturn
   */
  export type InsightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insight update
   */
  export type InsightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to update a Insight.
     */
    data: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
    /**
     * Choose, which Insight to update.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight updateMany
   */
  export type InsightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Insights.
     */
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyInput>
    /**
     * Filter which Insights to update
     */
    where?: InsightWhereInput
  }

  /**
   * Insight upsert
   */
  export type InsightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The filter to search for the Insight to update in case it exists.
     */
    where: InsightWhereUniqueInput
    /**
     * In case the Insight found by the `where` argument doesn't exist, create a new Insight with this data.
     */
    create: XOR<InsightCreateInput, InsightUncheckedCreateInput>
    /**
     * In case the Insight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
  }

  /**
   * Insight delete
   */
  export type InsightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter which Insight to delete.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight deleteMany
   */
  export type InsightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insights to delete
     */
    where?: InsightWhereInput
  }

  /**
   * Insight without action
   */
  export type InsightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: string
    title: string
    message: string
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      title: string
      message: string
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model DatingAppIntegration
   */

  export type AggregateDatingAppIntegration = {
    _count: DatingAppIntegrationCountAggregateOutputType | null
    _min: DatingAppIntegrationMinAggregateOutputType | null
    _max: DatingAppIntegrationMaxAggregateOutputType | null
  }

  export type DatingAppIntegrationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    appName: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatingAppIntegrationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    appName: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatingAppIntegrationCountAggregateOutputType = {
    id: number
    userId: number
    appName: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DatingAppIntegrationMinAggregateInputType = {
    id?: true
    userId?: true
    appName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatingAppIntegrationMaxAggregateInputType = {
    id?: true
    userId?: true
    appName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatingAppIntegrationCountAggregateInputType = {
    id?: true
    userId?: true
    appName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DatingAppIntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatingAppIntegration to aggregate.
     */
    where?: DatingAppIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatingAppIntegrations to fetch.
     */
    orderBy?: DatingAppIntegrationOrderByWithRelationInput | DatingAppIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DatingAppIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatingAppIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatingAppIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DatingAppIntegrations
    **/
    _count?: true | DatingAppIntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DatingAppIntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DatingAppIntegrationMaxAggregateInputType
  }

  export type GetDatingAppIntegrationAggregateType<T extends DatingAppIntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateDatingAppIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDatingAppIntegration[P]>
      : GetScalarType<T[P], AggregateDatingAppIntegration[P]>
  }




  export type DatingAppIntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatingAppIntegrationWhereInput
    orderBy?: DatingAppIntegrationOrderByWithAggregationInput | DatingAppIntegrationOrderByWithAggregationInput[]
    by: DatingAppIntegrationScalarFieldEnum[] | DatingAppIntegrationScalarFieldEnum
    having?: DatingAppIntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DatingAppIntegrationCountAggregateInputType | true
    _min?: DatingAppIntegrationMinAggregateInputType
    _max?: DatingAppIntegrationMaxAggregateInputType
  }

  export type DatingAppIntegrationGroupByOutputType = {
    id: string
    userId: string
    appName: string
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DatingAppIntegrationCountAggregateOutputType | null
    _min: DatingAppIntegrationMinAggregateOutputType | null
    _max: DatingAppIntegrationMaxAggregateOutputType | null
  }

  type GetDatingAppIntegrationGroupByPayload<T extends DatingAppIntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DatingAppIntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DatingAppIntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DatingAppIntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], DatingAppIntegrationGroupByOutputType[P]>
        }
      >
    >


  export type DatingAppIntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    appName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["datingAppIntegration"]>

  export type DatingAppIntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    appName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["datingAppIntegration"]>

  export type DatingAppIntegrationSelectScalar = {
    id?: boolean
    userId?: boolean
    appName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $DatingAppIntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DatingAppIntegration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      appName: string
      accessToken: string | null
      refreshToken: string | null
      expiresAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["datingAppIntegration"]>
    composites: {}
  }

  type DatingAppIntegrationGetPayload<S extends boolean | null | undefined | DatingAppIntegrationDefaultArgs> = $Result.GetResult<Prisma.$DatingAppIntegrationPayload, S>

  type DatingAppIntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DatingAppIntegrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DatingAppIntegrationCountAggregateInputType | true
    }

  export interface DatingAppIntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DatingAppIntegration'], meta: { name: 'DatingAppIntegration' } }
    /**
     * Find zero or one DatingAppIntegration that matches the filter.
     * @param {DatingAppIntegrationFindUniqueArgs} args - Arguments to find a DatingAppIntegration
     * @example
     * // Get one DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DatingAppIntegrationFindUniqueArgs>(args: SelectSubset<T, DatingAppIntegrationFindUniqueArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DatingAppIntegration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DatingAppIntegrationFindUniqueOrThrowArgs} args - Arguments to find a DatingAppIntegration
     * @example
     * // Get one DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DatingAppIntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, DatingAppIntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DatingAppIntegration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationFindFirstArgs} args - Arguments to find a DatingAppIntegration
     * @example
     * // Get one DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DatingAppIntegrationFindFirstArgs>(args?: SelectSubset<T, DatingAppIntegrationFindFirstArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DatingAppIntegration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationFindFirstOrThrowArgs} args - Arguments to find a DatingAppIntegration
     * @example
     * // Get one DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DatingAppIntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, DatingAppIntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DatingAppIntegrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DatingAppIntegrations
     * const datingAppIntegrations = await prisma.datingAppIntegration.findMany()
     * 
     * // Get first 10 DatingAppIntegrations
     * const datingAppIntegrations = await prisma.datingAppIntegration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const datingAppIntegrationWithIdOnly = await prisma.datingAppIntegration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DatingAppIntegrationFindManyArgs>(args?: SelectSubset<T, DatingAppIntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DatingAppIntegration.
     * @param {DatingAppIntegrationCreateArgs} args - Arguments to create a DatingAppIntegration.
     * @example
     * // Create one DatingAppIntegration
     * const DatingAppIntegration = await prisma.datingAppIntegration.create({
     *   data: {
     *     // ... data to create a DatingAppIntegration
     *   }
     * })
     * 
     */
    create<T extends DatingAppIntegrationCreateArgs>(args: SelectSubset<T, DatingAppIntegrationCreateArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DatingAppIntegrations.
     * @param {DatingAppIntegrationCreateManyArgs} args - Arguments to create many DatingAppIntegrations.
     * @example
     * // Create many DatingAppIntegrations
     * const datingAppIntegration = await prisma.datingAppIntegration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DatingAppIntegrationCreateManyArgs>(args?: SelectSubset<T, DatingAppIntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DatingAppIntegrations and returns the data saved in the database.
     * @param {DatingAppIntegrationCreateManyAndReturnArgs} args - Arguments to create many DatingAppIntegrations.
     * @example
     * // Create many DatingAppIntegrations
     * const datingAppIntegration = await prisma.datingAppIntegration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DatingAppIntegrations and only return the `id`
     * const datingAppIntegrationWithIdOnly = await prisma.datingAppIntegration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DatingAppIntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, DatingAppIntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DatingAppIntegration.
     * @param {DatingAppIntegrationDeleteArgs} args - Arguments to delete one DatingAppIntegration.
     * @example
     * // Delete one DatingAppIntegration
     * const DatingAppIntegration = await prisma.datingAppIntegration.delete({
     *   where: {
     *     // ... filter to delete one DatingAppIntegration
     *   }
     * })
     * 
     */
    delete<T extends DatingAppIntegrationDeleteArgs>(args: SelectSubset<T, DatingAppIntegrationDeleteArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DatingAppIntegration.
     * @param {DatingAppIntegrationUpdateArgs} args - Arguments to update one DatingAppIntegration.
     * @example
     * // Update one DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DatingAppIntegrationUpdateArgs>(args: SelectSubset<T, DatingAppIntegrationUpdateArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DatingAppIntegrations.
     * @param {DatingAppIntegrationDeleteManyArgs} args - Arguments to filter DatingAppIntegrations to delete.
     * @example
     * // Delete a few DatingAppIntegrations
     * const { count } = await prisma.datingAppIntegration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DatingAppIntegrationDeleteManyArgs>(args?: SelectSubset<T, DatingAppIntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DatingAppIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DatingAppIntegrations
     * const datingAppIntegration = await prisma.datingAppIntegration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DatingAppIntegrationUpdateManyArgs>(args: SelectSubset<T, DatingAppIntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DatingAppIntegration.
     * @param {DatingAppIntegrationUpsertArgs} args - Arguments to update or create a DatingAppIntegration.
     * @example
     * // Update or create a DatingAppIntegration
     * const datingAppIntegration = await prisma.datingAppIntegration.upsert({
     *   create: {
     *     // ... data to create a DatingAppIntegration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DatingAppIntegration we want to update
     *   }
     * })
     */
    upsert<T extends DatingAppIntegrationUpsertArgs>(args: SelectSubset<T, DatingAppIntegrationUpsertArgs<ExtArgs>>): Prisma__DatingAppIntegrationClient<$Result.GetResult<Prisma.$DatingAppIntegrationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DatingAppIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationCountArgs} args - Arguments to filter DatingAppIntegrations to count.
     * @example
     * // Count the number of DatingAppIntegrations
     * const count = await prisma.datingAppIntegration.count({
     *   where: {
     *     // ... the filter for the DatingAppIntegrations we want to count
     *   }
     * })
    **/
    count<T extends DatingAppIntegrationCountArgs>(
      args?: Subset<T, DatingAppIntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DatingAppIntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DatingAppIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DatingAppIntegrationAggregateArgs>(args: Subset<T, DatingAppIntegrationAggregateArgs>): Prisma.PrismaPromise<GetDatingAppIntegrationAggregateType<T>>

    /**
     * Group by DatingAppIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatingAppIntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DatingAppIntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DatingAppIntegrationGroupByArgs['orderBy'] }
        : { orderBy?: DatingAppIntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DatingAppIntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDatingAppIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DatingAppIntegration model
   */
  readonly fields: DatingAppIntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DatingAppIntegration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DatingAppIntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DatingAppIntegration model
   */ 
  interface DatingAppIntegrationFieldRefs {
    readonly id: FieldRef<"DatingAppIntegration", 'String'>
    readonly userId: FieldRef<"DatingAppIntegration", 'String'>
    readonly appName: FieldRef<"DatingAppIntegration", 'String'>
    readonly accessToken: FieldRef<"DatingAppIntegration", 'String'>
    readonly refreshToken: FieldRef<"DatingAppIntegration", 'String'>
    readonly expiresAt: FieldRef<"DatingAppIntegration", 'DateTime'>
    readonly isActive: FieldRef<"DatingAppIntegration", 'Boolean'>
    readonly createdAt: FieldRef<"DatingAppIntegration", 'DateTime'>
    readonly updatedAt: FieldRef<"DatingAppIntegration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DatingAppIntegration findUnique
   */
  export type DatingAppIntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter, which DatingAppIntegration to fetch.
     */
    where: DatingAppIntegrationWhereUniqueInput
  }

  /**
   * DatingAppIntegration findUniqueOrThrow
   */
  export type DatingAppIntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter, which DatingAppIntegration to fetch.
     */
    where: DatingAppIntegrationWhereUniqueInput
  }

  /**
   * DatingAppIntegration findFirst
   */
  export type DatingAppIntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter, which DatingAppIntegration to fetch.
     */
    where?: DatingAppIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatingAppIntegrations to fetch.
     */
    orderBy?: DatingAppIntegrationOrderByWithRelationInput | DatingAppIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatingAppIntegrations.
     */
    cursor?: DatingAppIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatingAppIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatingAppIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatingAppIntegrations.
     */
    distinct?: DatingAppIntegrationScalarFieldEnum | DatingAppIntegrationScalarFieldEnum[]
  }

  /**
   * DatingAppIntegration findFirstOrThrow
   */
  export type DatingAppIntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter, which DatingAppIntegration to fetch.
     */
    where?: DatingAppIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatingAppIntegrations to fetch.
     */
    orderBy?: DatingAppIntegrationOrderByWithRelationInput | DatingAppIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatingAppIntegrations.
     */
    cursor?: DatingAppIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatingAppIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatingAppIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatingAppIntegrations.
     */
    distinct?: DatingAppIntegrationScalarFieldEnum | DatingAppIntegrationScalarFieldEnum[]
  }

  /**
   * DatingAppIntegration findMany
   */
  export type DatingAppIntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter, which DatingAppIntegrations to fetch.
     */
    where?: DatingAppIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatingAppIntegrations to fetch.
     */
    orderBy?: DatingAppIntegrationOrderByWithRelationInput | DatingAppIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DatingAppIntegrations.
     */
    cursor?: DatingAppIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatingAppIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatingAppIntegrations.
     */
    skip?: number
    distinct?: DatingAppIntegrationScalarFieldEnum | DatingAppIntegrationScalarFieldEnum[]
  }

  /**
   * DatingAppIntegration create
   */
  export type DatingAppIntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * The data needed to create a DatingAppIntegration.
     */
    data: XOR<DatingAppIntegrationCreateInput, DatingAppIntegrationUncheckedCreateInput>
  }

  /**
   * DatingAppIntegration createMany
   */
  export type DatingAppIntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DatingAppIntegrations.
     */
    data: DatingAppIntegrationCreateManyInput | DatingAppIntegrationCreateManyInput[]
  }

  /**
   * DatingAppIntegration createManyAndReturn
   */
  export type DatingAppIntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DatingAppIntegrations.
     */
    data: DatingAppIntegrationCreateManyInput | DatingAppIntegrationCreateManyInput[]
  }

  /**
   * DatingAppIntegration update
   */
  export type DatingAppIntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * The data needed to update a DatingAppIntegration.
     */
    data: XOR<DatingAppIntegrationUpdateInput, DatingAppIntegrationUncheckedUpdateInput>
    /**
     * Choose, which DatingAppIntegration to update.
     */
    where: DatingAppIntegrationWhereUniqueInput
  }

  /**
   * DatingAppIntegration updateMany
   */
  export type DatingAppIntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DatingAppIntegrations.
     */
    data: XOR<DatingAppIntegrationUpdateManyMutationInput, DatingAppIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which DatingAppIntegrations to update
     */
    where?: DatingAppIntegrationWhereInput
  }

  /**
   * DatingAppIntegration upsert
   */
  export type DatingAppIntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * The filter to search for the DatingAppIntegration to update in case it exists.
     */
    where: DatingAppIntegrationWhereUniqueInput
    /**
     * In case the DatingAppIntegration found by the `where` argument doesn't exist, create a new DatingAppIntegration with this data.
     */
    create: XOR<DatingAppIntegrationCreateInput, DatingAppIntegrationUncheckedCreateInput>
    /**
     * In case the DatingAppIntegration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DatingAppIntegrationUpdateInput, DatingAppIntegrationUncheckedUpdateInput>
  }

  /**
   * DatingAppIntegration delete
   */
  export type DatingAppIntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
    /**
     * Filter which DatingAppIntegration to delete.
     */
    where: DatingAppIntegrationWhereUniqueInput
  }

  /**
   * DatingAppIntegration deleteMany
   */
  export type DatingAppIntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatingAppIntegrations to delete
     */
    where?: DatingAppIntegrationWhereInput
  }

  /**
   * DatingAppIntegration without action
   */
  export type DatingAppIntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatingAppIntegration
     */
    select?: DatingAppIntegrationSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    profileImage: 'profileImage',
    bio: 'bio',
    preferences: 'preferences',
    isPremium: 'isPremium',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    age: 'age',
    photos: 'photos',
    bio: 'bio',
    interests: 'interests',
    location: 'location',
    datingApp: 'datingApp',
    externalId: 'externalId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const DateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    profileId: 'profileId',
    dateNumber: 'dateNumber',
    location: 'location',
    activity: 'activity',
    duration: 'duration',
    date: 'date',
    isCompleted: 'isCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DateScalarFieldEnum = (typeof DateScalarFieldEnum)[keyof typeof DateScalarFieldEnum]


  export const DateEvaluationScalarFieldEnum: {
    id: 'id',
    dateId: 'dateId',
    userId: 'userId',
    vibeCheck: 'vibeCheck',
    chemistryRating: 'chemistryRating',
    attractionRating: 'attractionRating',
    greenFlags: 'greenFlags',
    redFlags: 'redFlags',
    emotionalImpact: 'emotionalImpact',
    conversationQuality: 'conversationQuality',
    effortLevel: 'effortLevel',
    bodyLanguage: 'bodyLanguage',
    profileImage: 'profileImage',
    imageAnalysis: 'imageAnalysis',
    consistencyCheck: 'consistencyCheck',
    powerDynamics: 'powerDynamics',
    wouldIntroduceToFriends: 'wouldIntroduceToFriends',
    remindedOf: 'remindedOf',
    songMovieFit: 'songMovieFit',
    emojiSummary: 'emojiSummary',
    customTags: 'customTags',
    aiInsights: 'aiInsights',
    compatibilityScore: 'compatibilityScore',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DateEvaluationScalarFieldEnum = (typeof DateEvaluationScalarFieldEnum)[keyof typeof DateEvaluationScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const InsightScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    content: 'content',
    data: 'data',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type InsightScalarFieldEnum = (typeof InsightScalarFieldEnum)[keyof typeof InsightScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const DatingAppIntegrationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    appName: 'appName',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DatingAppIntegrationScalarFieldEnum = (typeof DatingAppIntegrationScalarFieldEnum)[keyof typeof DatingAppIntegrationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    isPremium?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profiles?: ProfileListRelationFilter
    dates?: DateListRelationFilter
    evaluations?: DateEvaluationListRelationFilter
    tags?: TagListRelationFilter
    insights?: InsightListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profiles?: ProfileOrderByRelationAggregateInput
    dates?: DateOrderByRelationAggregateInput
    evaluations?: DateEvaluationOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    insights?: InsightOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    isPremium?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profiles?: ProfileListRelationFilter
    dates?: DateListRelationFilter
    evaluations?: DateEvaluationListRelationFilter
    tags?: TagListRelationFilter
    insights?: InsightListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferences?: StringNullableWithAggregatesFilter<"User"> | string | null
    isPremium?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    age?: IntNullableFilter<"Profile"> | number | null
    photos?: StringNullableFilter<"Profile"> | string | null
    bio?: StringNullableFilter<"Profile"> | string | null
    interests?: StringNullableFilter<"Profile"> | string | null
    location?: StringNullableFilter<"Profile"> | string | null
    datingApp?: StringNullableFilter<"Profile"> | string | null
    externalId?: StringNullableFilter<"Profile"> | string | null
    isActive?: BoolFilter<"Profile"> | boolean
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    dates?: DateListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    age?: SortOrderInput | SortOrder
    photos?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    interests?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    datingApp?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    dates?: DateOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    userId?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    age?: IntNullableFilter<"Profile"> | number | null
    photos?: StringNullableFilter<"Profile"> | string | null
    bio?: StringNullableFilter<"Profile"> | string | null
    interests?: StringNullableFilter<"Profile"> | string | null
    location?: StringNullableFilter<"Profile"> | string | null
    datingApp?: StringNullableFilter<"Profile"> | string | null
    externalId?: StringNullableFilter<"Profile"> | string | null
    isActive?: BoolFilter<"Profile"> | boolean
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    dates?: DateListRelationFilter
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    age?: SortOrderInput | SortOrder
    photos?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    interests?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    datingApp?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    userId?: StringWithAggregatesFilter<"Profile"> | string
    name?: StringWithAggregatesFilter<"Profile"> | string
    age?: IntNullableWithAggregatesFilter<"Profile"> | number | null
    photos?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    bio?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    interests?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    location?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    datingApp?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    externalId?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    isActive?: BoolWithAggregatesFilter<"Profile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type DateWhereInput = {
    AND?: DateWhereInput | DateWhereInput[]
    OR?: DateWhereInput[]
    NOT?: DateWhereInput | DateWhereInput[]
    id?: StringFilter<"Date"> | string
    userId?: StringFilter<"Date"> | string
    profileId?: StringNullableFilter<"Date"> | string | null
    dateNumber?: IntFilter<"Date"> | number
    location?: StringNullableFilter<"Date"> | string | null
    activity?: StringNullableFilter<"Date"> | string | null
    duration?: IntNullableFilter<"Date"> | number | null
    date?: DateTimeFilter<"Date"> | Date | string
    isCompleted?: BoolFilter<"Date"> | boolean
    createdAt?: DateTimeFilter<"Date"> | Date | string
    updatedAt?: DateTimeFilter<"Date"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    evaluation?: XOR<DateEvaluationNullableRelationFilter, DateEvaluationWhereInput> | null
  }

  export type DateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    dateNumber?: SortOrder
    location?: SortOrderInput | SortOrder
    activity?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    date?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    evaluation?: DateEvaluationOrderByWithRelationInput
  }

  export type DateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DateWhereInput | DateWhereInput[]
    OR?: DateWhereInput[]
    NOT?: DateWhereInput | DateWhereInput[]
    userId?: StringFilter<"Date"> | string
    profileId?: StringNullableFilter<"Date"> | string | null
    dateNumber?: IntFilter<"Date"> | number
    location?: StringNullableFilter<"Date"> | string | null
    activity?: StringNullableFilter<"Date"> | string | null
    duration?: IntNullableFilter<"Date"> | number | null
    date?: DateTimeFilter<"Date"> | Date | string
    isCompleted?: BoolFilter<"Date"> | boolean
    createdAt?: DateTimeFilter<"Date"> | Date | string
    updatedAt?: DateTimeFilter<"Date"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    profile?: XOR<ProfileNullableRelationFilter, ProfileWhereInput> | null
    evaluation?: XOR<DateEvaluationNullableRelationFilter, DateEvaluationWhereInput> | null
  }, "id">

  export type DateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrderInput | SortOrder
    dateNumber?: SortOrder
    location?: SortOrderInput | SortOrder
    activity?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    date?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DateCountOrderByAggregateInput
    _avg?: DateAvgOrderByAggregateInput
    _max?: DateMaxOrderByAggregateInput
    _min?: DateMinOrderByAggregateInput
    _sum?: DateSumOrderByAggregateInput
  }

  export type DateScalarWhereWithAggregatesInput = {
    AND?: DateScalarWhereWithAggregatesInput | DateScalarWhereWithAggregatesInput[]
    OR?: DateScalarWhereWithAggregatesInput[]
    NOT?: DateScalarWhereWithAggregatesInput | DateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Date"> | string
    userId?: StringWithAggregatesFilter<"Date"> | string
    profileId?: StringNullableWithAggregatesFilter<"Date"> | string | null
    dateNumber?: IntWithAggregatesFilter<"Date"> | number
    location?: StringNullableWithAggregatesFilter<"Date"> | string | null
    activity?: StringNullableWithAggregatesFilter<"Date"> | string | null
    duration?: IntNullableWithAggregatesFilter<"Date"> | number | null
    date?: DateTimeWithAggregatesFilter<"Date"> | Date | string
    isCompleted?: BoolWithAggregatesFilter<"Date"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Date"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Date"> | Date | string
  }

  export type DateEvaluationWhereInput = {
    AND?: DateEvaluationWhereInput | DateEvaluationWhereInput[]
    OR?: DateEvaluationWhereInput[]
    NOT?: DateEvaluationWhereInput | DateEvaluationWhereInput[]
    id?: StringFilter<"DateEvaluation"> | string
    dateId?: StringFilter<"DateEvaluation"> | string
    userId?: StringFilter<"DateEvaluation"> | string
    vibeCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    chemistryRating?: IntNullableFilter<"DateEvaluation"> | number | null
    attractionRating?: IntNullableFilter<"DateEvaluation"> | number | null
    greenFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    redFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    emotionalImpact?: StringNullableFilter<"DateEvaluation"> | string | null
    conversationQuality?: StringNullableFilter<"DateEvaluation"> | string | null
    effortLevel?: StringNullableFilter<"DateEvaluation"> | string | null
    bodyLanguage?: StringNullableFilter<"DateEvaluation"> | string | null
    profileImage?: StringNullableFilter<"DateEvaluation"> | string | null
    imageAnalysis?: StringNullableFilter<"DateEvaluation"> | string | null
    consistencyCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    powerDynamics?: StringNullableFilter<"DateEvaluation"> | string | null
    wouldIntroduceToFriends?: StringNullableFilter<"DateEvaluation"> | string | null
    remindedOf?: StringNullableFilter<"DateEvaluation"> | string | null
    songMovieFit?: StringNullableFilter<"DateEvaluation"> | string | null
    emojiSummary?: StringNullableFilter<"DateEvaluation"> | string | null
    customTags?: StringNullableFilter<"DateEvaluation"> | string | null
    aiInsights?: StringNullableFilter<"DateEvaluation"> | string | null
    compatibilityScore?: FloatNullableFilter<"DateEvaluation"> | number | null
    createdAt?: DateTimeFilter<"DateEvaluation"> | Date | string
    updatedAt?: DateTimeFilter<"DateEvaluation"> | Date | string
    date?: XOR<DateRelationFilter, DateWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    tags?: TagListRelationFilter
  }

  export type DateEvaluationOrderByWithRelationInput = {
    id?: SortOrder
    dateId?: SortOrder
    userId?: SortOrder
    vibeCheck?: SortOrderInput | SortOrder
    chemistryRating?: SortOrderInput | SortOrder
    attractionRating?: SortOrderInput | SortOrder
    greenFlags?: SortOrderInput | SortOrder
    redFlags?: SortOrderInput | SortOrder
    emotionalImpact?: SortOrderInput | SortOrder
    conversationQuality?: SortOrderInput | SortOrder
    effortLevel?: SortOrderInput | SortOrder
    bodyLanguage?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    imageAnalysis?: SortOrderInput | SortOrder
    consistencyCheck?: SortOrderInput | SortOrder
    powerDynamics?: SortOrderInput | SortOrder
    wouldIntroduceToFriends?: SortOrderInput | SortOrder
    remindedOf?: SortOrderInput | SortOrder
    songMovieFit?: SortOrderInput | SortOrder
    emojiSummary?: SortOrderInput | SortOrder
    customTags?: SortOrderInput | SortOrder
    aiInsights?: SortOrderInput | SortOrder
    compatibilityScore?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: DateOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type DateEvaluationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    dateId?: string
    AND?: DateEvaluationWhereInput | DateEvaluationWhereInput[]
    OR?: DateEvaluationWhereInput[]
    NOT?: DateEvaluationWhereInput | DateEvaluationWhereInput[]
    userId?: StringFilter<"DateEvaluation"> | string
    vibeCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    chemistryRating?: IntNullableFilter<"DateEvaluation"> | number | null
    attractionRating?: IntNullableFilter<"DateEvaluation"> | number | null
    greenFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    redFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    emotionalImpact?: StringNullableFilter<"DateEvaluation"> | string | null
    conversationQuality?: StringNullableFilter<"DateEvaluation"> | string | null
    effortLevel?: StringNullableFilter<"DateEvaluation"> | string | null
    bodyLanguage?: StringNullableFilter<"DateEvaluation"> | string | null
    profileImage?: StringNullableFilter<"DateEvaluation"> | string | null
    imageAnalysis?: StringNullableFilter<"DateEvaluation"> | string | null
    consistencyCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    powerDynamics?: StringNullableFilter<"DateEvaluation"> | string | null
    wouldIntroduceToFriends?: StringNullableFilter<"DateEvaluation"> | string | null
    remindedOf?: StringNullableFilter<"DateEvaluation"> | string | null
    songMovieFit?: StringNullableFilter<"DateEvaluation"> | string | null
    emojiSummary?: StringNullableFilter<"DateEvaluation"> | string | null
    customTags?: StringNullableFilter<"DateEvaluation"> | string | null
    aiInsights?: StringNullableFilter<"DateEvaluation"> | string | null
    compatibilityScore?: FloatNullableFilter<"DateEvaluation"> | number | null
    createdAt?: DateTimeFilter<"DateEvaluation"> | Date | string
    updatedAt?: DateTimeFilter<"DateEvaluation"> | Date | string
    date?: XOR<DateRelationFilter, DateWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    tags?: TagListRelationFilter
  }, "id" | "dateId">

  export type DateEvaluationOrderByWithAggregationInput = {
    id?: SortOrder
    dateId?: SortOrder
    userId?: SortOrder
    vibeCheck?: SortOrderInput | SortOrder
    chemistryRating?: SortOrderInput | SortOrder
    attractionRating?: SortOrderInput | SortOrder
    greenFlags?: SortOrderInput | SortOrder
    redFlags?: SortOrderInput | SortOrder
    emotionalImpact?: SortOrderInput | SortOrder
    conversationQuality?: SortOrderInput | SortOrder
    effortLevel?: SortOrderInput | SortOrder
    bodyLanguage?: SortOrderInput | SortOrder
    profileImage?: SortOrderInput | SortOrder
    imageAnalysis?: SortOrderInput | SortOrder
    consistencyCheck?: SortOrderInput | SortOrder
    powerDynamics?: SortOrderInput | SortOrder
    wouldIntroduceToFriends?: SortOrderInput | SortOrder
    remindedOf?: SortOrderInput | SortOrder
    songMovieFit?: SortOrderInput | SortOrder
    emojiSummary?: SortOrderInput | SortOrder
    customTags?: SortOrderInput | SortOrder
    aiInsights?: SortOrderInput | SortOrder
    compatibilityScore?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DateEvaluationCountOrderByAggregateInput
    _avg?: DateEvaluationAvgOrderByAggregateInput
    _max?: DateEvaluationMaxOrderByAggregateInput
    _min?: DateEvaluationMinOrderByAggregateInput
    _sum?: DateEvaluationSumOrderByAggregateInput
  }

  export type DateEvaluationScalarWhereWithAggregatesInput = {
    AND?: DateEvaluationScalarWhereWithAggregatesInput | DateEvaluationScalarWhereWithAggregatesInput[]
    OR?: DateEvaluationScalarWhereWithAggregatesInput[]
    NOT?: DateEvaluationScalarWhereWithAggregatesInput | DateEvaluationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DateEvaluation"> | string
    dateId?: StringWithAggregatesFilter<"DateEvaluation"> | string
    userId?: StringWithAggregatesFilter<"DateEvaluation"> | string
    vibeCheck?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    chemistryRating?: IntNullableWithAggregatesFilter<"DateEvaluation"> | number | null
    attractionRating?: IntNullableWithAggregatesFilter<"DateEvaluation"> | number | null
    greenFlags?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    redFlags?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    emotionalImpact?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    conversationQuality?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    effortLevel?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    bodyLanguage?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    imageAnalysis?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    consistencyCheck?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    powerDynamics?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    wouldIntroduceToFriends?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    remindedOf?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    songMovieFit?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    emojiSummary?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    customTags?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    aiInsights?: StringNullableWithAggregatesFilter<"DateEvaluation"> | string | null
    compatibilityScore?: FloatNullableWithAggregatesFilter<"DateEvaluation"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"DateEvaluation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DateEvaluation"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    category?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    users?: UserListRelationFilter
    evaluations?: DateEvaluationListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    evaluations?: DateEvaluationOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    category?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    users?: UserListRelationFilter
    evaluations?: DateEvaluationListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    category?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    color?: StringNullableWithAggregatesFilter<"Tag"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type InsightWhereInput = {
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    id?: StringFilter<"Insight"> | string
    userId?: StringFilter<"Insight"> | string
    type?: StringFilter<"Insight"> | string
    title?: StringFilter<"Insight"> | string
    content?: StringFilter<"Insight"> | string
    data?: StringNullableFilter<"Insight"> | string | null
    isRead?: BoolFilter<"Insight"> | boolean
    createdAt?: DateTimeFilter<"Insight"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InsightOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type InsightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    userId?: StringFilter<"Insight"> | string
    type?: StringFilter<"Insight"> | string
    title?: StringFilter<"Insight"> | string
    content?: StringFilter<"Insight"> | string
    data?: StringNullableFilter<"Insight"> | string | null
    isRead?: BoolFilter<"Insight"> | boolean
    createdAt?: DateTimeFilter<"Insight"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type InsightOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: InsightCountOrderByAggregateInput
    _max?: InsightMaxOrderByAggregateInput
    _min?: InsightMinOrderByAggregateInput
  }

  export type InsightScalarWhereWithAggregatesInput = {
    AND?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    OR?: InsightScalarWhereWithAggregatesInput[]
    NOT?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Insight"> | string
    userId?: StringWithAggregatesFilter<"Insight"> | string
    type?: StringWithAggregatesFilter<"Insight"> | string
    title?: StringWithAggregatesFilter<"Insight"> | string
    content?: StringWithAggregatesFilter<"Insight"> | string
    data?: StringNullableWithAggregatesFilter<"Insight"> | string | null
    isRead?: BoolWithAggregatesFilter<"Insight"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Insight"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type DatingAppIntegrationWhereInput = {
    AND?: DatingAppIntegrationWhereInput | DatingAppIntegrationWhereInput[]
    OR?: DatingAppIntegrationWhereInput[]
    NOT?: DatingAppIntegrationWhereInput | DatingAppIntegrationWhereInput[]
    id?: StringFilter<"DatingAppIntegration"> | string
    userId?: StringFilter<"DatingAppIntegration"> | string
    appName?: StringFilter<"DatingAppIntegration"> | string
    accessToken?: StringNullableFilter<"DatingAppIntegration"> | string | null
    refreshToken?: StringNullableFilter<"DatingAppIntegration"> | string | null
    expiresAt?: DateTimeNullableFilter<"DatingAppIntegration"> | Date | string | null
    isActive?: BoolFilter<"DatingAppIntegration"> | boolean
    createdAt?: DateTimeFilter<"DatingAppIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"DatingAppIntegration"> | Date | string
  }

  export type DatingAppIntegrationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    appName?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatingAppIntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_appName?: DatingAppIntegrationUserIdAppNameCompoundUniqueInput
    AND?: DatingAppIntegrationWhereInput | DatingAppIntegrationWhereInput[]
    OR?: DatingAppIntegrationWhereInput[]
    NOT?: DatingAppIntegrationWhereInput | DatingAppIntegrationWhereInput[]
    userId?: StringFilter<"DatingAppIntegration"> | string
    appName?: StringFilter<"DatingAppIntegration"> | string
    accessToken?: StringNullableFilter<"DatingAppIntegration"> | string | null
    refreshToken?: StringNullableFilter<"DatingAppIntegration"> | string | null
    expiresAt?: DateTimeNullableFilter<"DatingAppIntegration"> | Date | string | null
    isActive?: BoolFilter<"DatingAppIntegration"> | boolean
    createdAt?: DateTimeFilter<"DatingAppIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"DatingAppIntegration"> | Date | string
  }, "id" | "userId_appName">

  export type DatingAppIntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    appName?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DatingAppIntegrationCountOrderByAggregateInput
    _max?: DatingAppIntegrationMaxOrderByAggregateInput
    _min?: DatingAppIntegrationMinOrderByAggregateInput
  }

  export type DatingAppIntegrationScalarWhereWithAggregatesInput = {
    AND?: DatingAppIntegrationScalarWhereWithAggregatesInput | DatingAppIntegrationScalarWhereWithAggregatesInput[]
    OR?: DatingAppIntegrationScalarWhereWithAggregatesInput[]
    NOT?: DatingAppIntegrationScalarWhereWithAggregatesInput | DatingAppIntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DatingAppIntegration"> | string
    userId?: StringWithAggregatesFilter<"DatingAppIntegration"> | string
    appName?: StringWithAggregatesFilter<"DatingAppIntegration"> | string
    accessToken?: StringNullableWithAggregatesFilter<"DatingAppIntegration"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"DatingAppIntegration"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"DatingAppIntegration"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"DatingAppIntegration"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DatingAppIntegration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DatingAppIntegration"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    dates?: DateCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    insights?: InsightCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    dates?: DateUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfilesInput
    dates?: DateCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dates?: DateUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfilesNestedInput
    dates?: DateUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dates?: DateUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    userId: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateCreateInput = {
    id?: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDatesInput
    profile?: ProfileCreateNestedOneWithoutDatesInput
    evaluation?: DateEvaluationCreateNestedOneWithoutDateInput
  }

  export type DateUncheckedCreateInput = {
    id?: string
    userId: string
    profileId?: string | null
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    evaluation?: DateEvaluationUncheckedCreateNestedOneWithoutDateInput
  }

  export type DateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDatesNestedInput
    profile?: ProfileUpdateOneWithoutDatesNestedInput
    evaluation?: DateEvaluationUpdateOneWithoutDateNestedInput
  }

  export type DateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evaluation?: DateEvaluationUncheckedUpdateOneWithoutDateNestedInput
  }

  export type DateCreateManyInput = {
    id?: string
    userId: string
    profileId?: string | null
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationCreateInput = {
    id?: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    date: DateCreateNestedOneWithoutEvaluationInput
    user: UserCreateNestedOneWithoutEvaluationsInput
    tags?: TagCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationUncheckedCreateInput = {
    id?: string
    dateId: string
    userId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: DateUpdateOneRequiredWithoutEvaluationNestedInput
    user?: UserUpdateOneRequiredWithoutEvaluationsNestedInput
    tags?: TagUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateEvaluationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateEvaluationCreateManyInput = {
    id?: string
    dateId: string
    userId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateEvaluationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTagsInput
    evaluations?: DateEvaluationCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTagsInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTagsNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTagsNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightCreateInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutInsightsInput
  }

  export type InsightUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type InsightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInsightsNestedInput
  }

  export type InsightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type InsightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatingAppIntegrationCreateInput = {
    id?: string
    userId: string
    appName: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatingAppIntegrationUncheckedCreateInput = {
    id?: string
    userId: string
    appName: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatingAppIntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appName?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatingAppIntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appName?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatingAppIntegrationCreateManyInput = {
    id?: string
    userId: string
    appName: string
    accessToken?: string | null
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatingAppIntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appName?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatingAppIntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appName?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type DateListRelationFilter = {
    every?: DateWhereInput
    some?: DateWhereInput
    none?: DateWhereInput
  }

  export type DateEvaluationListRelationFilter = {
    every?: DateEvaluationWhereInput
    some?: DateEvaluationWhereInput
    none?: DateEvaluationWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type InsightListRelationFilter = {
    every?: InsightWhereInput
    some?: InsightWhereInput
    none?: InsightWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DateEvaluationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    profileImage?: SortOrder
    bio?: SortOrder
    preferences?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    profileImage?: SortOrder
    bio?: SortOrder
    preferences?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    profileImage?: SortOrder
    bio?: SortOrder
    preferences?: SortOrder
    isPremium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    age?: SortOrder
    photos?: SortOrder
    bio?: SortOrder
    interests?: SortOrder
    location?: SortOrder
    datingApp?: SortOrder
    externalId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    age?: SortOrder
    photos?: SortOrder
    bio?: SortOrder
    interests?: SortOrder
    location?: SortOrder
    datingApp?: SortOrder
    externalId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    age?: SortOrder
    photos?: SortOrder
    bio?: SortOrder
    interests?: SortOrder
    location?: SortOrder
    datingApp?: SortOrder
    externalId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProfileNullableRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type DateEvaluationNullableRelationFilter = {
    is?: DateEvaluationWhereInput | null
    isNot?: DateEvaluationWhereInput | null
  }

  export type DateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    dateNumber?: SortOrder
    location?: SortOrder
    activity?: SortOrder
    duration?: SortOrder
    date?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateAvgOrderByAggregateInput = {
    dateNumber?: SortOrder
    duration?: SortOrder
  }

  export type DateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    dateNumber?: SortOrder
    location?: SortOrder
    activity?: SortOrder
    duration?: SortOrder
    date?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    profileId?: SortOrder
    dateNumber?: SortOrder
    location?: SortOrder
    activity?: SortOrder
    duration?: SortOrder
    date?: SortOrder
    isCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateSumOrderByAggregateInput = {
    dateNumber?: SortOrder
    duration?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateRelationFilter = {
    is?: DateWhereInput
    isNot?: DateWhereInput
  }

  export type DateEvaluationCountOrderByAggregateInput = {
    id?: SortOrder
    dateId?: SortOrder
    userId?: SortOrder
    vibeCheck?: SortOrder
    chemistryRating?: SortOrder
    attractionRating?: SortOrder
    greenFlags?: SortOrder
    redFlags?: SortOrder
    emotionalImpact?: SortOrder
    conversationQuality?: SortOrder
    effortLevel?: SortOrder
    bodyLanguage?: SortOrder
    profileImage?: SortOrder
    imageAnalysis?: SortOrder
    consistencyCheck?: SortOrder
    powerDynamics?: SortOrder
    wouldIntroduceToFriends?: SortOrder
    remindedOf?: SortOrder
    songMovieFit?: SortOrder
    emojiSummary?: SortOrder
    customTags?: SortOrder
    aiInsights?: SortOrder
    compatibilityScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateEvaluationAvgOrderByAggregateInput = {
    chemistryRating?: SortOrder
    attractionRating?: SortOrder
    compatibilityScore?: SortOrder
  }

  export type DateEvaluationMaxOrderByAggregateInput = {
    id?: SortOrder
    dateId?: SortOrder
    userId?: SortOrder
    vibeCheck?: SortOrder
    chemistryRating?: SortOrder
    attractionRating?: SortOrder
    greenFlags?: SortOrder
    redFlags?: SortOrder
    emotionalImpact?: SortOrder
    conversationQuality?: SortOrder
    effortLevel?: SortOrder
    bodyLanguage?: SortOrder
    profileImage?: SortOrder
    imageAnalysis?: SortOrder
    consistencyCheck?: SortOrder
    powerDynamics?: SortOrder
    wouldIntroduceToFriends?: SortOrder
    remindedOf?: SortOrder
    songMovieFit?: SortOrder
    emojiSummary?: SortOrder
    customTags?: SortOrder
    aiInsights?: SortOrder
    compatibilityScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateEvaluationMinOrderByAggregateInput = {
    id?: SortOrder
    dateId?: SortOrder
    userId?: SortOrder
    vibeCheck?: SortOrder
    chemistryRating?: SortOrder
    attractionRating?: SortOrder
    greenFlags?: SortOrder
    redFlags?: SortOrder
    emotionalImpact?: SortOrder
    conversationQuality?: SortOrder
    effortLevel?: SortOrder
    bodyLanguage?: SortOrder
    profileImage?: SortOrder
    imageAnalysis?: SortOrder
    consistencyCheck?: SortOrder
    powerDynamics?: SortOrder
    wouldIntroduceToFriends?: SortOrder
    remindedOf?: SortOrder
    songMovieFit?: SortOrder
    emojiSummary?: SortOrder
    customTags?: SortOrder
    aiInsights?: SortOrder
    compatibilityScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateEvaluationSumOrderByAggregateInput = {
    chemistryRating?: SortOrder
    attractionRating?: SortOrder
    compatibilityScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InsightCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type InsightMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type InsightMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type DatingAppIntegrationUserIdAppNameCompoundUniqueInput = {
    userId: string
    appName: string
  }

  export type DatingAppIntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    appName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatingAppIntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    appName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatingAppIntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    appName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type DateCreateNestedManyWithoutUserInput = {
    create?: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput> | DateCreateWithoutUserInput[] | DateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateCreateOrConnectWithoutUserInput | DateCreateOrConnectWithoutUserInput[]
    createMany?: DateCreateManyUserInputEnvelope
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
  }

  export type DateEvaluationCreateNestedManyWithoutUserInput = {
    create?: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput> | DateEvaluationCreateWithoutUserInput[] | DateEvaluationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutUserInput | DateEvaluationCreateOrConnectWithoutUserInput[]
    createMany?: DateEvaluationCreateManyUserInputEnvelope
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutUsersInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput> | TagCreateWithoutUsersInput[] | TagUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput | TagCreateOrConnectWithoutUsersInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type InsightCreateNestedManyWithoutUserInput = {
    create?: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput> | InsightCreateWithoutUserInput[] | InsightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutUserInput | InsightCreateOrConnectWithoutUserInput[]
    createMany?: InsightCreateManyUserInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type DateUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput> | DateCreateWithoutUserInput[] | DateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateCreateOrConnectWithoutUserInput | DateCreateOrConnectWithoutUserInput[]
    createMany?: DateCreateManyUserInputEnvelope
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
  }

  export type DateEvaluationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput> | DateEvaluationCreateWithoutUserInput[] | DateEvaluationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutUserInput | DateEvaluationCreateOrConnectWithoutUserInput[]
    createMany?: DateEvaluationCreateManyUserInputEnvelope
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput> | TagCreateWithoutUsersInput[] | TagUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput | TagCreateOrConnectWithoutUsersInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type InsightUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput> | InsightCreateWithoutUserInput[] | InsightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutUserInput | InsightCreateOrConnectWithoutUserInput[]
    createMany?: InsightCreateManyUserInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type DateUpdateManyWithoutUserNestedInput = {
    create?: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput> | DateCreateWithoutUserInput[] | DateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateCreateOrConnectWithoutUserInput | DateCreateOrConnectWithoutUserInput[]
    upsert?: DateUpsertWithWhereUniqueWithoutUserInput | DateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DateCreateManyUserInputEnvelope
    set?: DateWhereUniqueInput | DateWhereUniqueInput[]
    disconnect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    delete?: DateWhereUniqueInput | DateWhereUniqueInput[]
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    update?: DateUpdateWithWhereUniqueWithoutUserInput | DateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DateUpdateManyWithWhereWithoutUserInput | DateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DateScalarWhereInput | DateScalarWhereInput[]
  }

  export type DateEvaluationUpdateManyWithoutUserNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput> | DateEvaluationCreateWithoutUserInput[] | DateEvaluationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutUserInput | DateEvaluationCreateOrConnectWithoutUserInput[]
    upsert?: DateEvaluationUpsertWithWhereUniqueWithoutUserInput | DateEvaluationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DateEvaluationCreateManyUserInputEnvelope
    set?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    disconnect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    delete?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    update?: DateEvaluationUpdateWithWhereUniqueWithoutUserInput | DateEvaluationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DateEvaluationUpdateManyWithWhereWithoutUserInput | DateEvaluationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
  }

  export type TagUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput> | TagCreateWithoutUsersInput[] | TagUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput | TagCreateOrConnectWithoutUsersInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutUsersInput | TagUpsertWithWhereUniqueWithoutUsersInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutUsersInput | TagUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TagUpdateManyWithWhereWithoutUsersInput | TagUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type InsightUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput> | InsightCreateWithoutUserInput[] | InsightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutUserInput | InsightCreateOrConnectWithoutUserInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutUserInput | InsightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsightCreateManyUserInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutUserInput | InsightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutUserInput | InsightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput> | ProfileCreateWithoutUserInput[] | ProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput | ProfileCreateOrConnectWithoutUserInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUserInput | ProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfileCreateManyUserInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUserInput | ProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUserInput | ProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type DateUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput> | DateCreateWithoutUserInput[] | DateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateCreateOrConnectWithoutUserInput | DateCreateOrConnectWithoutUserInput[]
    upsert?: DateUpsertWithWhereUniqueWithoutUserInput | DateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DateCreateManyUserInputEnvelope
    set?: DateWhereUniqueInput | DateWhereUniqueInput[]
    disconnect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    delete?: DateWhereUniqueInput | DateWhereUniqueInput[]
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    update?: DateUpdateWithWhereUniqueWithoutUserInput | DateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DateUpdateManyWithWhereWithoutUserInput | DateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DateScalarWhereInput | DateScalarWhereInput[]
  }

  export type DateEvaluationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput> | DateEvaluationCreateWithoutUserInput[] | DateEvaluationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutUserInput | DateEvaluationCreateOrConnectWithoutUserInput[]
    upsert?: DateEvaluationUpsertWithWhereUniqueWithoutUserInput | DateEvaluationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DateEvaluationCreateManyUserInputEnvelope
    set?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    disconnect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    delete?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    update?: DateEvaluationUpdateWithWhereUniqueWithoutUserInput | DateEvaluationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DateEvaluationUpdateManyWithWhereWithoutUserInput | DateEvaluationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput> | TagCreateWithoutUsersInput[] | TagUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TagCreateOrConnectWithoutUsersInput | TagCreateOrConnectWithoutUsersInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutUsersInput | TagUpsertWithWhereUniqueWithoutUsersInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutUsersInput | TagUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TagUpdateManyWithWhereWithoutUsersInput | TagUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type InsightUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput> | InsightCreateWithoutUserInput[] | InsightUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutUserInput | InsightCreateOrConnectWithoutUserInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutUserInput | InsightUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InsightCreateManyUserInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutUserInput | InsightUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutUserInput | InsightUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type DateCreateNestedManyWithoutProfileInput = {
    create?: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput> | DateCreateWithoutProfileInput[] | DateUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: DateCreateOrConnectWithoutProfileInput | DateCreateOrConnectWithoutProfileInput[]
    createMany?: DateCreateManyProfileInputEnvelope
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
  }

  export type DateUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput> | DateCreateWithoutProfileInput[] | DateUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: DateCreateOrConnectWithoutProfileInput | DateCreateOrConnectWithoutProfileInput[]
    createMany?: DateCreateManyProfileInputEnvelope
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilesInput, UserUpdateWithoutProfilesInput>, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type DateUpdateManyWithoutProfileNestedInput = {
    create?: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput> | DateCreateWithoutProfileInput[] | DateUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: DateCreateOrConnectWithoutProfileInput | DateCreateOrConnectWithoutProfileInput[]
    upsert?: DateUpsertWithWhereUniqueWithoutProfileInput | DateUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: DateCreateManyProfileInputEnvelope
    set?: DateWhereUniqueInput | DateWhereUniqueInput[]
    disconnect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    delete?: DateWhereUniqueInput | DateWhereUniqueInput[]
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    update?: DateUpdateWithWhereUniqueWithoutProfileInput | DateUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: DateUpdateManyWithWhereWithoutProfileInput | DateUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: DateScalarWhereInput | DateScalarWhereInput[]
  }

  export type DateUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput> | DateCreateWithoutProfileInput[] | DateUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: DateCreateOrConnectWithoutProfileInput | DateCreateOrConnectWithoutProfileInput[]
    upsert?: DateUpsertWithWhereUniqueWithoutProfileInput | DateUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: DateCreateManyProfileInputEnvelope
    set?: DateWhereUniqueInput | DateWhereUniqueInput[]
    disconnect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    delete?: DateWhereUniqueInput | DateWhereUniqueInput[]
    connect?: DateWhereUniqueInput | DateWhereUniqueInput[]
    update?: DateUpdateWithWhereUniqueWithoutProfileInput | DateUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: DateUpdateManyWithWhereWithoutProfileInput | DateUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: DateScalarWhereInput | DateScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDatesInput = {
    create?: XOR<UserCreateWithoutDatesInput, UserUncheckedCreateWithoutDatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDatesInput
    connect?: UserWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutDatesInput = {
    create?: XOR<ProfileCreateWithoutDatesInput, ProfileUncheckedCreateWithoutDatesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutDatesInput
    connect?: ProfileWhereUniqueInput
  }

  export type DateEvaluationCreateNestedOneWithoutDateInput = {
    create?: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutDateInput
    connect?: DateEvaluationWhereUniqueInput
  }

  export type DateEvaluationUncheckedCreateNestedOneWithoutDateInput = {
    create?: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutDateInput
    connect?: DateEvaluationWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDatesNestedInput = {
    create?: XOR<UserCreateWithoutDatesInput, UserUncheckedCreateWithoutDatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDatesInput
    upsert?: UserUpsertWithoutDatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDatesInput, UserUpdateWithoutDatesInput>, UserUncheckedUpdateWithoutDatesInput>
  }

  export type ProfileUpdateOneWithoutDatesNestedInput = {
    create?: XOR<ProfileCreateWithoutDatesInput, ProfileUncheckedCreateWithoutDatesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutDatesInput
    upsert?: ProfileUpsertWithoutDatesInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutDatesInput, ProfileUpdateWithoutDatesInput>, ProfileUncheckedUpdateWithoutDatesInput>
  }

  export type DateEvaluationUpdateOneWithoutDateNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutDateInput
    upsert?: DateEvaluationUpsertWithoutDateInput
    disconnect?: DateEvaluationWhereInput | boolean
    delete?: DateEvaluationWhereInput | boolean
    connect?: DateEvaluationWhereUniqueInput
    update?: XOR<XOR<DateEvaluationUpdateToOneWithWhereWithoutDateInput, DateEvaluationUpdateWithoutDateInput>, DateEvaluationUncheckedUpdateWithoutDateInput>
  }

  export type DateEvaluationUncheckedUpdateOneWithoutDateNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutDateInput
    upsert?: DateEvaluationUpsertWithoutDateInput
    disconnect?: DateEvaluationWhereInput | boolean
    delete?: DateEvaluationWhereInput | boolean
    connect?: DateEvaluationWhereUniqueInput
    update?: XOR<XOR<DateEvaluationUpdateToOneWithWhereWithoutDateInput, DateEvaluationUpdateWithoutDateInput>, DateEvaluationUncheckedUpdateWithoutDateInput>
  }

  export type DateCreateNestedOneWithoutEvaluationInput = {
    create?: XOR<DateCreateWithoutEvaluationInput, DateUncheckedCreateWithoutEvaluationInput>
    connectOrCreate?: DateCreateOrConnectWithoutEvaluationInput
    connect?: DateWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEvaluationsInput = {
    create?: XOR<UserCreateWithoutEvaluationsInput, UserUncheckedCreateWithoutEvaluationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsInput
    connect?: UserWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutEvaluationsInput = {
    create?: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput> | TagCreateWithoutEvaluationsInput[] | TagUncheckedCreateWithoutEvaluationsInput[]
    connectOrCreate?: TagCreateOrConnectWithoutEvaluationsInput | TagCreateOrConnectWithoutEvaluationsInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutEvaluationsInput = {
    create?: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput> | TagCreateWithoutEvaluationsInput[] | TagUncheckedCreateWithoutEvaluationsInput[]
    connectOrCreate?: TagCreateOrConnectWithoutEvaluationsInput | TagCreateOrConnectWithoutEvaluationsInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateUpdateOneRequiredWithoutEvaluationNestedInput = {
    create?: XOR<DateCreateWithoutEvaluationInput, DateUncheckedCreateWithoutEvaluationInput>
    connectOrCreate?: DateCreateOrConnectWithoutEvaluationInput
    upsert?: DateUpsertWithoutEvaluationInput
    connect?: DateWhereUniqueInput
    update?: XOR<XOR<DateUpdateToOneWithWhereWithoutEvaluationInput, DateUpdateWithoutEvaluationInput>, DateUncheckedUpdateWithoutEvaluationInput>
  }

  export type UserUpdateOneRequiredWithoutEvaluationsNestedInput = {
    create?: XOR<UserCreateWithoutEvaluationsInput, UserUncheckedCreateWithoutEvaluationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvaluationsInput
    upsert?: UserUpsertWithoutEvaluationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEvaluationsInput, UserUpdateWithoutEvaluationsInput>, UserUncheckedUpdateWithoutEvaluationsInput>
  }

  export type TagUpdateManyWithoutEvaluationsNestedInput = {
    create?: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput> | TagCreateWithoutEvaluationsInput[] | TagUncheckedCreateWithoutEvaluationsInput[]
    connectOrCreate?: TagCreateOrConnectWithoutEvaluationsInput | TagCreateOrConnectWithoutEvaluationsInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutEvaluationsInput | TagUpsertWithWhereUniqueWithoutEvaluationsInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutEvaluationsInput | TagUpdateWithWhereUniqueWithoutEvaluationsInput[]
    updateMany?: TagUpdateManyWithWhereWithoutEvaluationsInput | TagUpdateManyWithWhereWithoutEvaluationsInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutEvaluationsNestedInput = {
    create?: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput> | TagCreateWithoutEvaluationsInput[] | TagUncheckedCreateWithoutEvaluationsInput[]
    connectOrCreate?: TagCreateOrConnectWithoutEvaluationsInput | TagCreateOrConnectWithoutEvaluationsInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutEvaluationsInput | TagUpsertWithWhereUniqueWithoutEvaluationsInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutEvaluationsInput | TagUpdateWithWhereUniqueWithoutEvaluationsInput[]
    updateMany?: TagUpdateManyWithWhereWithoutEvaluationsInput | TagUpdateManyWithWhereWithoutEvaluationsInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutTagsInput = {
    create?: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput> | UserCreateWithoutTagsInput[] | UserUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTagsInput | UserCreateOrConnectWithoutTagsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DateEvaluationCreateNestedManyWithoutTagsInput = {
    create?: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput> | DateEvaluationCreateWithoutTagsInput[] | DateEvaluationUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutTagsInput | DateEvaluationCreateOrConnectWithoutTagsInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput> | UserCreateWithoutTagsInput[] | UserUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTagsInput | UserCreateOrConnectWithoutTagsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DateEvaluationUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput> | DateEvaluationCreateWithoutTagsInput[] | DateEvaluationUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutTagsInput | DateEvaluationCreateOrConnectWithoutTagsInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTagsNestedInput = {
    create?: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput> | UserCreateWithoutTagsInput[] | UserUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTagsInput | UserCreateOrConnectWithoutTagsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTagsInput | UserUpsertWithWhereUniqueWithoutTagsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTagsInput | UserUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTagsInput | UserUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DateEvaluationUpdateManyWithoutTagsNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput> | DateEvaluationCreateWithoutTagsInput[] | DateEvaluationUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutTagsInput | DateEvaluationCreateOrConnectWithoutTagsInput[]
    upsert?: DateEvaluationUpsertWithWhereUniqueWithoutTagsInput | DateEvaluationUpsertWithWhereUniqueWithoutTagsInput[]
    set?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    disconnect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    delete?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    update?: DateEvaluationUpdateWithWhereUniqueWithoutTagsInput | DateEvaluationUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: DateEvaluationUpdateManyWithWhereWithoutTagsInput | DateEvaluationUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput> | UserCreateWithoutTagsInput[] | UserUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTagsInput | UserCreateOrConnectWithoutTagsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTagsInput | UserUpsertWithWhereUniqueWithoutTagsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTagsInput | UserUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTagsInput | UserUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DateEvaluationUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput> | DateEvaluationCreateWithoutTagsInput[] | DateEvaluationUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: DateEvaluationCreateOrConnectWithoutTagsInput | DateEvaluationCreateOrConnectWithoutTagsInput[]
    upsert?: DateEvaluationUpsertWithWhereUniqueWithoutTagsInput | DateEvaluationUpsertWithWhereUniqueWithoutTagsInput[]
    set?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    disconnect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    delete?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    connect?: DateEvaluationWhereUniqueInput | DateEvaluationWhereUniqueInput[]
    update?: DateEvaluationUpdateWithWhereUniqueWithoutTagsInput | DateEvaluationUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: DateEvaluationUpdateManyWithWhereWithoutTagsInput | DateEvaluationUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInsightsInput = {
    create?: XOR<UserCreateWithoutInsightsInput, UserUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsightsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInsightsNestedInput = {
    create?: XOR<UserCreateWithoutInsightsInput, UserUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInsightsInput
    upsert?: UserUpsertWithoutInsightsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInsightsInput, UserUpdateWithoutInsightsInput>, UserUncheckedUpdateWithoutInsightsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dates?: DateCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dates?: DateUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateManyUserInputEnvelope = {
    data: ProfileCreateManyUserInput | ProfileCreateManyUserInput[]
  }

  export type DateCreateWithoutUserInput = {
    id?: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutDatesInput
    evaluation?: DateEvaluationCreateNestedOneWithoutDateInput
  }

  export type DateUncheckedCreateWithoutUserInput = {
    id?: string
    profileId?: string | null
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    evaluation?: DateEvaluationUncheckedCreateNestedOneWithoutDateInput
  }

  export type DateCreateOrConnectWithoutUserInput = {
    where: DateWhereUniqueInput
    create: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput>
  }

  export type DateCreateManyUserInputEnvelope = {
    data: DateCreateManyUserInput | DateCreateManyUserInput[]
  }

  export type DateEvaluationCreateWithoutUserInput = {
    id?: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    date: DateCreateNestedOneWithoutEvaluationInput
    tags?: TagCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationUncheckedCreateWithoutUserInput = {
    id?: string
    dateId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationCreateOrConnectWithoutUserInput = {
    where: DateEvaluationWhereUniqueInput
    create: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput>
  }

  export type DateEvaluationCreateManyUserInputEnvelope = {
    data: DateEvaluationCreateManyUserInput | DateEvaluationCreateManyUserInput[]
  }

  export type TagCreateWithoutUsersInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    evaluations?: DateEvaluationCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagCreateOrConnectWithoutUsersInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>
  }

  export type InsightCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type InsightUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type InsightCreateOrConnectWithoutUserInput = {
    where: InsightWhereUniqueInput
    create: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput>
  }

  export type InsightCreateManyUserInputEnvelope = {
    data: InsightCreateManyUserInput | InsightCreateManyUserInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type ProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUserInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    name?: StringFilter<"Profile"> | string
    age?: IntNullableFilter<"Profile"> | number | null
    photos?: StringNullableFilter<"Profile"> | string | null
    bio?: StringNullableFilter<"Profile"> | string | null
    interests?: StringNullableFilter<"Profile"> | string | null
    location?: StringNullableFilter<"Profile"> | string | null
    datingApp?: StringNullableFilter<"Profile"> | string | null
    externalId?: StringNullableFilter<"Profile"> | string | null
    isActive?: BoolFilter<"Profile"> | boolean
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
  }

  export type DateUpsertWithWhereUniqueWithoutUserInput = {
    where: DateWhereUniqueInput
    update: XOR<DateUpdateWithoutUserInput, DateUncheckedUpdateWithoutUserInput>
    create: XOR<DateCreateWithoutUserInput, DateUncheckedCreateWithoutUserInput>
  }

  export type DateUpdateWithWhereUniqueWithoutUserInput = {
    where: DateWhereUniqueInput
    data: XOR<DateUpdateWithoutUserInput, DateUncheckedUpdateWithoutUserInput>
  }

  export type DateUpdateManyWithWhereWithoutUserInput = {
    where: DateScalarWhereInput
    data: XOR<DateUpdateManyMutationInput, DateUncheckedUpdateManyWithoutUserInput>
  }

  export type DateScalarWhereInput = {
    AND?: DateScalarWhereInput | DateScalarWhereInput[]
    OR?: DateScalarWhereInput[]
    NOT?: DateScalarWhereInput | DateScalarWhereInput[]
    id?: StringFilter<"Date"> | string
    userId?: StringFilter<"Date"> | string
    profileId?: StringNullableFilter<"Date"> | string | null
    dateNumber?: IntFilter<"Date"> | number
    location?: StringNullableFilter<"Date"> | string | null
    activity?: StringNullableFilter<"Date"> | string | null
    duration?: IntNullableFilter<"Date"> | number | null
    date?: DateTimeFilter<"Date"> | Date | string
    isCompleted?: BoolFilter<"Date"> | boolean
    createdAt?: DateTimeFilter<"Date"> | Date | string
    updatedAt?: DateTimeFilter<"Date"> | Date | string
  }

  export type DateEvaluationUpsertWithWhereUniqueWithoutUserInput = {
    where: DateEvaluationWhereUniqueInput
    update: XOR<DateEvaluationUpdateWithoutUserInput, DateEvaluationUncheckedUpdateWithoutUserInput>
    create: XOR<DateEvaluationCreateWithoutUserInput, DateEvaluationUncheckedCreateWithoutUserInput>
  }

  export type DateEvaluationUpdateWithWhereUniqueWithoutUserInput = {
    where: DateEvaluationWhereUniqueInput
    data: XOR<DateEvaluationUpdateWithoutUserInput, DateEvaluationUncheckedUpdateWithoutUserInput>
  }

  export type DateEvaluationUpdateManyWithWhereWithoutUserInput = {
    where: DateEvaluationScalarWhereInput
    data: XOR<DateEvaluationUpdateManyMutationInput, DateEvaluationUncheckedUpdateManyWithoutUserInput>
  }

  export type DateEvaluationScalarWhereInput = {
    AND?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
    OR?: DateEvaluationScalarWhereInput[]
    NOT?: DateEvaluationScalarWhereInput | DateEvaluationScalarWhereInput[]
    id?: StringFilter<"DateEvaluation"> | string
    dateId?: StringFilter<"DateEvaluation"> | string
    userId?: StringFilter<"DateEvaluation"> | string
    vibeCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    chemistryRating?: IntNullableFilter<"DateEvaluation"> | number | null
    attractionRating?: IntNullableFilter<"DateEvaluation"> | number | null
    greenFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    redFlags?: StringNullableFilter<"DateEvaluation"> | string | null
    emotionalImpact?: StringNullableFilter<"DateEvaluation"> | string | null
    conversationQuality?: StringNullableFilter<"DateEvaluation"> | string | null
    effortLevel?: StringNullableFilter<"DateEvaluation"> | string | null
    bodyLanguage?: StringNullableFilter<"DateEvaluation"> | string | null
    profileImage?: StringNullableFilter<"DateEvaluation"> | string | null
    imageAnalysis?: StringNullableFilter<"DateEvaluation"> | string | null
    consistencyCheck?: StringNullableFilter<"DateEvaluation"> | string | null
    powerDynamics?: StringNullableFilter<"DateEvaluation"> | string | null
    wouldIntroduceToFriends?: StringNullableFilter<"DateEvaluation"> | string | null
    remindedOf?: StringNullableFilter<"DateEvaluation"> | string | null
    songMovieFit?: StringNullableFilter<"DateEvaluation"> | string | null
    emojiSummary?: StringNullableFilter<"DateEvaluation"> | string | null
    customTags?: StringNullableFilter<"DateEvaluation"> | string | null
    aiInsights?: StringNullableFilter<"DateEvaluation"> | string | null
    compatibilityScore?: FloatNullableFilter<"DateEvaluation"> | number | null
    createdAt?: DateTimeFilter<"DateEvaluation"> | Date | string
    updatedAt?: DateTimeFilter<"DateEvaluation"> | Date | string
  }

  export type TagUpsertWithWhereUniqueWithoutUsersInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>
    create: XOR<TagCreateWithoutUsersInput, TagUncheckedCreateWithoutUsersInput>
  }

  export type TagUpdateWithWhereUniqueWithoutUsersInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutUsersInput, TagUncheckedUpdateWithoutUsersInput>
  }

  export type TagUpdateManyWithWhereWithoutUsersInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutUsersInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    category?: StringNullableFilter<"Tag"> | string | null
    color?: StringNullableFilter<"Tag"> | string | null
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
  }

  export type InsightUpsertWithWhereUniqueWithoutUserInput = {
    where: InsightWhereUniqueInput
    update: XOR<InsightUpdateWithoutUserInput, InsightUncheckedUpdateWithoutUserInput>
    create: XOR<InsightCreateWithoutUserInput, InsightUncheckedCreateWithoutUserInput>
  }

  export type InsightUpdateWithWhereUniqueWithoutUserInput = {
    where: InsightWhereUniqueInput
    data: XOR<InsightUpdateWithoutUserInput, InsightUncheckedUpdateWithoutUserInput>
  }

  export type InsightUpdateManyWithWhereWithoutUserInput = {
    where: InsightScalarWhereInput
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyWithoutUserInput>
  }

  export type InsightScalarWhereInput = {
    AND?: InsightScalarWhereInput | InsightScalarWhereInput[]
    OR?: InsightScalarWhereInput[]
    NOT?: InsightScalarWhereInput | InsightScalarWhereInput[]
    id?: StringFilter<"Insight"> | string
    userId?: StringFilter<"Insight"> | string
    type?: StringFilter<"Insight"> | string
    title?: StringFilter<"Insight"> | string
    content?: StringFilter<"Insight"> | string
    data?: StringNullableFilter<"Insight"> | string | null
    isRead?: BoolFilter<"Insight"> | boolean
    createdAt?: DateTimeFilter<"Insight"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserCreateWithoutProfilesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dates?: DateCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    insights?: InsightCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type DateCreateWithoutProfileInput = {
    id?: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDatesInput
    evaluation?: DateEvaluationCreateNestedOneWithoutDateInput
  }

  export type DateUncheckedCreateWithoutProfileInput = {
    id?: string
    userId: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    evaluation?: DateEvaluationUncheckedCreateNestedOneWithoutDateInput
  }

  export type DateCreateOrConnectWithoutProfileInput = {
    where: DateWhereUniqueInput
    create: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput>
  }

  export type DateCreateManyProfileInputEnvelope = {
    data: DateCreateManyProfileInput | DateCreateManyProfileInput[]
  }

  export type UserUpsertWithoutProfilesInput = {
    update: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type UserUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dates?: DateUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DateUpsertWithWhereUniqueWithoutProfileInput = {
    where: DateWhereUniqueInput
    update: XOR<DateUpdateWithoutProfileInput, DateUncheckedUpdateWithoutProfileInput>
    create: XOR<DateCreateWithoutProfileInput, DateUncheckedCreateWithoutProfileInput>
  }

  export type DateUpdateWithWhereUniqueWithoutProfileInput = {
    where: DateWhereUniqueInput
    data: XOR<DateUpdateWithoutProfileInput, DateUncheckedUpdateWithoutProfileInput>
  }

  export type DateUpdateManyWithWhereWithoutProfileInput = {
    where: DateScalarWhereInput
    data: XOR<DateUpdateManyMutationInput, DateUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserCreateWithoutDatesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    insights?: InsightCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDatesInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDatesInput, UserUncheckedCreateWithoutDatesInput>
  }

  export type ProfileCreateWithoutDatesInput = {
    id?: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfilesInput
  }

  export type ProfileUncheckedCreateWithoutDatesInput = {
    id?: string
    userId: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutDatesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutDatesInput, ProfileUncheckedCreateWithoutDatesInput>
  }

  export type DateEvaluationCreateWithoutDateInput = {
    id?: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEvaluationsInput
    tags?: TagCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationUncheckedCreateWithoutDateInput = {
    id?: string
    userId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tags?: TagUncheckedCreateNestedManyWithoutEvaluationsInput
  }

  export type DateEvaluationCreateOrConnectWithoutDateInput = {
    where: DateEvaluationWhereUniqueInput
    create: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
  }

  export type UserUpsertWithoutDatesInput = {
    update: XOR<UserUpdateWithoutDatesInput, UserUncheckedUpdateWithoutDatesInput>
    create: XOR<UserCreateWithoutDatesInput, UserUncheckedCreateWithoutDatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDatesInput, UserUncheckedUpdateWithoutDatesInput>
  }

  export type UserUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileUpsertWithoutDatesInput = {
    update: XOR<ProfileUpdateWithoutDatesInput, ProfileUncheckedUpdateWithoutDatesInput>
    create: XOR<ProfileCreateWithoutDatesInput, ProfileUncheckedCreateWithoutDatesInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutDatesInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutDatesInput, ProfileUncheckedUpdateWithoutDatesInput>
  }

  export type ProfileUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationUpsertWithoutDateInput = {
    update: XOR<DateEvaluationUpdateWithoutDateInput, DateEvaluationUncheckedUpdateWithoutDateInput>
    create: XOR<DateEvaluationCreateWithoutDateInput, DateEvaluationUncheckedCreateWithoutDateInput>
    where?: DateEvaluationWhereInput
  }

  export type DateEvaluationUpdateToOneWithWhereWithoutDateInput = {
    where?: DateEvaluationWhereInput
    data: XOR<DateEvaluationUpdateWithoutDateInput, DateEvaluationUncheckedUpdateWithoutDateInput>
  }

  export type DateEvaluationUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEvaluationsNestedInput
    tags?: TagUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateEvaluationUncheckedUpdateWithoutDateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateCreateWithoutEvaluationInput = {
    id?: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDatesInput
    profile?: ProfileCreateNestedOneWithoutDatesInput
  }

  export type DateUncheckedCreateWithoutEvaluationInput = {
    id?: string
    userId: string
    profileId?: string | null
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateCreateOrConnectWithoutEvaluationInput = {
    where: DateWhereUniqueInput
    create: XOR<DateCreateWithoutEvaluationInput, DateUncheckedCreateWithoutEvaluationInput>
  }

  export type UserCreateWithoutEvaluationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    dates?: DateCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    insights?: InsightCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEvaluationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEvaluationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEvaluationsInput, UserUncheckedCreateWithoutEvaluationsInput>
  }

  export type TagCreateWithoutEvaluationsInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutEvaluationsInput = {
    id?: string
    name: string
    category?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagCreateOrConnectWithoutEvaluationsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput>
  }

  export type DateUpsertWithoutEvaluationInput = {
    update: XOR<DateUpdateWithoutEvaluationInput, DateUncheckedUpdateWithoutEvaluationInput>
    create: XOR<DateCreateWithoutEvaluationInput, DateUncheckedCreateWithoutEvaluationInput>
    where?: DateWhereInput
  }

  export type DateUpdateToOneWithWhereWithoutEvaluationInput = {
    where?: DateWhereInput
    data: XOR<DateUpdateWithoutEvaluationInput, DateUncheckedUpdateWithoutEvaluationInput>
  }

  export type DateUpdateWithoutEvaluationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDatesNestedInput
    profile?: ProfileUpdateOneWithoutDatesNestedInput
  }

  export type DateUncheckedUpdateWithoutEvaluationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutEvaluationsInput = {
    update: XOR<UserUpdateWithoutEvaluationsInput, UserUncheckedUpdateWithoutEvaluationsInput>
    create: XOR<UserCreateWithoutEvaluationsInput, UserUncheckedCreateWithoutEvaluationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEvaluationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEvaluationsInput, UserUncheckedUpdateWithoutEvaluationsInput>
  }

  export type UserUpdateWithoutEvaluationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    dates?: DateUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEvaluationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutEvaluationsInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutEvaluationsInput, TagUncheckedUpdateWithoutEvaluationsInput>
    create: XOR<TagCreateWithoutEvaluationsInput, TagUncheckedCreateWithoutEvaluationsInput>
  }

  export type TagUpdateWithWhereUniqueWithoutEvaluationsInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutEvaluationsInput, TagUncheckedUpdateWithoutEvaluationsInput>
  }

  export type TagUpdateManyWithWhereWithoutEvaluationsInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutEvaluationsInput>
  }

  export type UserCreateWithoutTagsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    dates?: DateCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    insights?: InsightCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTagsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTagsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput>
  }

  export type DateEvaluationCreateWithoutTagsInput = {
    id?: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    date: DateCreateNestedOneWithoutEvaluationInput
    user: UserCreateNestedOneWithoutEvaluationsInput
  }

  export type DateEvaluationUncheckedCreateWithoutTagsInput = {
    id?: string
    dateId: string
    userId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateEvaluationCreateOrConnectWithoutTagsInput = {
    where: DateEvaluationWhereUniqueInput
    create: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTagsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTagsInput, UserUncheckedUpdateWithoutTagsInput>
    create: XOR<UserCreateWithoutTagsInput, UserUncheckedCreateWithoutTagsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTagsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTagsInput, UserUncheckedUpdateWithoutTagsInput>
  }

  export type UserUpdateManyWithWhereWithoutTagsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTagsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    preferences?: StringNullableFilter<"User"> | string | null
    isPremium?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type DateEvaluationUpsertWithWhereUniqueWithoutTagsInput = {
    where: DateEvaluationWhereUniqueInput
    update: XOR<DateEvaluationUpdateWithoutTagsInput, DateEvaluationUncheckedUpdateWithoutTagsInput>
    create: XOR<DateEvaluationCreateWithoutTagsInput, DateEvaluationUncheckedCreateWithoutTagsInput>
  }

  export type DateEvaluationUpdateWithWhereUniqueWithoutTagsInput = {
    where: DateEvaluationWhereUniqueInput
    data: XOR<DateEvaluationUpdateWithoutTagsInput, DateEvaluationUncheckedUpdateWithoutTagsInput>
  }

  export type DateEvaluationUpdateManyWithWhereWithoutTagsInput = {
    where: DateEvaluationScalarWhereInput
    data: XOR<DateEvaluationUpdateManyMutationInput, DateEvaluationUncheckedUpdateManyWithoutTagsInput>
  }

  export type UserCreateWithoutInsightsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    dates?: DateCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInsightsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInsightsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInsightsInput, UserUncheckedCreateWithoutInsightsInput>
  }

  export type UserUpsertWithoutInsightsInput = {
    update: XOR<UserUpdateWithoutInsightsInput, UserUncheckedUpdateWithoutInsightsInput>
    create: XOR<UserCreateWithoutInsightsInput, UserUncheckedCreateWithoutInsightsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInsightsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInsightsInput, UserUncheckedUpdateWithoutInsightsInput>
  }

  export type UserUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    dates?: DateUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateNestedManyWithoutUserInput
    dates?: DateCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationCreateNestedManyWithoutUserInput
    tags?: TagCreateNestedManyWithoutUsersInput
    insights?: InsightCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    username: string
    password: string
    firstName?: string | null
    lastName?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileImage?: string | null
    bio?: string | null
    preferences?: string | null
    isPremium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileUncheckedCreateNestedManyWithoutUserInput
    dates?: DateUncheckedCreateNestedManyWithoutUserInput
    evaluations?: DateEvaluationUncheckedCreateNestedManyWithoutUserInput
    tags?: TagUncheckedCreateNestedManyWithoutUsersInput
    insights?: InsightUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    dates?: DateUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    tags?: TagUpdateManyWithoutUsersNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    tags?: TagUncheckedUpdateManyWithoutUsersNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileCreateManyUserInput = {
    id?: string
    name: string
    age?: number | null
    photos?: string | null
    bio?: string | null
    interests?: string | null
    location?: string | null
    datingApp?: string | null
    externalId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateCreateManyUserInput = {
    id?: string
    profileId?: string | null
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateEvaluationCreateManyUserInput = {
    id?: string
    dateId: string
    vibeCheck?: string | null
    chemistryRating?: number | null
    attractionRating?: number | null
    greenFlags?: string | null
    redFlags?: string | null
    emotionalImpact?: string | null
    conversationQuality?: string | null
    effortLevel?: string | null
    bodyLanguage?: string | null
    profileImage?: string | null
    imageAnalysis?: string | null
    consistencyCheck?: string | null
    powerDynamics?: string | null
    wouldIntroduceToFriends?: string | null
    remindedOf?: string | null
    songMovieFit?: string | null
    emojiSummary?: string | null
    customTags?: string | null
    aiInsights?: string | null
    compatibilityScore?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InsightCreateManyUserInput = {
    id?: string
    type: string
    title: string
    content: string
    data?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dates?: DateUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dates?: DateUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    photos?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    datingApp?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutDatesNestedInput
    evaluation?: DateEvaluationUpdateOneWithoutDateNestedInput
  }

  export type DateUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evaluation?: DateEvaluationUncheckedUpdateOneWithoutDateNestedInput
  }

  export type DateUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: NullableStringFieldUpdateOperationsInput | string | null
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: DateUpdateOneRequiredWithoutEvaluationNestedInput
    tags?: TagUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateEvaluationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tags?: TagUncheckedUpdateManyWithoutEvaluationsNestedInput
  }

  export type DateEvaluationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evaluations?: DateEvaluationUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    data?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateCreateManyProfileInput = {
    id?: string
    userId: string
    dateNumber: number
    location?: string | null
    activity?: string | null
    duration?: number | null
    date: Date | string
    isCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DateUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDatesNestedInput
    evaluation?: DateEvaluationUpdateOneWithoutDateNestedInput
  }

  export type DateUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evaluation?: DateEvaluationUncheckedUpdateOneWithoutDateNestedInput
  }

  export type DateUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dateNumber?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    activity?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutEvaluationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateWithoutEvaluationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateManyWithoutEvaluationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateManyWithoutUserNestedInput
    dates?: DateUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUpdateManyWithoutUserNestedInput
    insights?: InsightUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUncheckedUpdateManyWithoutUserNestedInput
    dates?: DateUncheckedUpdateManyWithoutUserNestedInput
    evaluations?: DateEvaluationUncheckedUpdateManyWithoutUserNestedInput
    insights?: InsightUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: DateUpdateOneRequiredWithoutEvaluationNestedInput
    user?: UserUpdateOneRequiredWithoutEvaluationsNestedInput
  }

  export type DateEvaluationUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DateEvaluationUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    vibeCheck?: NullableStringFieldUpdateOperationsInput | string | null
    chemistryRating?: NullableIntFieldUpdateOperationsInput | number | null
    attractionRating?: NullableIntFieldUpdateOperationsInput | number | null
    greenFlags?: NullableStringFieldUpdateOperationsInput | string | null
    redFlags?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalImpact?: NullableStringFieldUpdateOperationsInput | string | null
    conversationQuality?: NullableStringFieldUpdateOperationsInput | string | null
    effortLevel?: NullableStringFieldUpdateOperationsInput | string | null
    bodyLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    imageAnalysis?: NullableStringFieldUpdateOperationsInput | string | null
    consistencyCheck?: NullableStringFieldUpdateOperationsInput | string | null
    powerDynamics?: NullableStringFieldUpdateOperationsInput | string | null
    wouldIntroduceToFriends?: NullableStringFieldUpdateOperationsInput | string | null
    remindedOf?: NullableStringFieldUpdateOperationsInput | string | null
    songMovieFit?: NullableStringFieldUpdateOperationsInput | string | null
    emojiSummary?: NullableStringFieldUpdateOperationsInput | string | null
    customTags?: NullableStringFieldUpdateOperationsInput | string | null
    aiInsights?: NullableStringFieldUpdateOperationsInput | string | null
    compatibilityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileCountOutputTypeDefaultArgs instead
     */
    export type ProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DateEvaluationCountOutputTypeDefaultArgs instead
     */
    export type DateEvaluationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DateEvaluationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DateDefaultArgs instead
     */
    export type DateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DateEvaluationDefaultArgs instead
     */
    export type DateEvaluationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DateEvaluationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InsightDefaultArgs instead
     */
    export type InsightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InsightDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DatingAppIntegrationDefaultArgs instead
     */
    export type DatingAppIntegrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DatingAppIntegrationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}